name: Android Build & Smoke Test

env:
  NODE_OPTIONS: --openssl-legacy-provider
  ADB_INSTALL_TIMEOUT: 20
  SMOKE_SOFT_FAIL: ${{ github.event.inputs.smoke_soft_fail }}

on:
  workflow_dispatch:
    inputs:
      smoke_soft_fail:
        description: "Mark smoke test neutral on failure (upload logs anyway)"
        required: false
        default: "false"
  push:
    branches:
      - main
      - develop
      - feat/ccpm-framework
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    name: Build APKs
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Guard fail if CRLF present in workflow
        run: |
          if grep -U $'\r' -n ".github/workflows/android-debug-build.yml"; then
            echo "CRLF detected in workflow; must be LF." >&2
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 11 (Gradle)
        id: j11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Setup Java 17 (sdkmanager tools)
        id: j17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Verify Java toolchains
        shell: bash
        run: |
          echo "Gradle should use Java 11:"
          "${{ steps.j11.outputs.path }}/bin/java" -version
          echo "sdkmanager should use Java 17:"
          "${{ steps.j17.outputs.path }}/bin/java" -version

      - name: Setup Android SDK (Ubuntu)
        uses: android-actions/setup-android@v3

      - name: Guard Print Android SDK paths
        shell: bash
        run: |
          set -euo pipefail
          echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT:-<unset>}"
          echo "ANDROID_HOME=${ANDROID_HOME:-<unset>}"
          command -v sdkmanager || true
          command -v adb || true

      - name: Prepare Android SDK (isolated, AGP 7.0.x safe)
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
        run: |
          set -e

          # Isolate SDK so AGP doesn't see newer "33x/34x/..." tool labels
          rm -rf "$ANDROID_SDK_ROOT"
          mkdir -p "$ANDROID_SDK_ROOT"

          echo "sdk.dir=$ANDROID_SDK_ROOT" > ./android/local.properties

          # Pin an older cmdline-tools revision compatible with AGP 7.0.x
          # (8512546 is known-good; avoid latest which emits newer repo XML/labels)
          CT_REV=8512546
          curl -sSL "https://dl.google.com/android/repository/commandlinetools-linux-${CT_REV}_latest.zip" -o cmdtools.zip
          unzip -q cmdtools.zip -d "$ANDROID_SDK_ROOT"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/bin" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true
          mv "$ANDROID_SDK_ROOT/cmdline-tools/lib" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true
          mv "$ANDROID_SDK_ROOT/cmdline-tools/source.properties" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true
          mv "$ANDROID_SDK_ROOT/cmdline-tools/NOTICE.txt" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true

          # Accept licenses non-interactively
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" --licenses >/dev/null

          # Install ONLY what AGP 7.0.4 needs
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" \
            "platforms;android-31" \
            "build-tools;31.0.0"

          echo "=== Installed build-tools ==="
          ls -1 "$ANDROID_SDK_ROOT/build-tools" || true

          # Guard: fail if anything other than 31.0.0 is present
          BT_COUNT=$(ls -1 "$ANDROID_SDK_ROOT/build-tools" | wc -l | tr -d ' ')
          if [ "$BT_COUNT" != "1" ] || [ ! -d "$ANDROID_SDK_ROOT/build-tools/31.0.0" ]; then
            echo "Unexpected build-tools present. Found:"
            ls -1 "$ANDROID_SDK_ROOT/build-tools" || true
            exit 1
          fi

      - name: Print versions
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
          JAVA_HOME: ${{ steps.j11.outputs.path }}
        run: |
          echo "JAVA (Gradle):" && java -version
          echo "Gradle wrapper:" && ./android/gradlew -v
          echo "SDK Root: $ANDROID_SDK_ROOT"

      - name: Use Node 18 (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Prime Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Ensure Gradle build cache on
        run: |
          mkdir -p ~/.gradle
          {
            echo "org.gradle.caching=true"
            echo "org.gradle.parallel=false"
          } >> ~/.gradle/gradle.properties
          
      - name: Install Node dependencies
        run: npm install --legacy-peer-deps

      - name: Install TrackPlayer stub (TEMP for CI)
        run: |
          # Create TrackPlayer stub for CI builds
          mkdir -p node_modules/react-native-track-player
          cat > node_modules/react-native-track-player/package.json << 'EOF'
          {
            "name": "react-native-track-player",
            "version": "0.0.0-stub",
            "description": "Temporary stub for react-native-track-player (CI build only)",
            "main": "index.js",
            "private": true
          }
          EOF
          cat > node_modules/react-native-track-player/index.js << 'EOF'
          // TEMP STUB: react-native-track-player disabled for CI build
          const TrackPlayer = {
            setupPlayer: async () => console.log('TrackPlayer stub: setupPlayer called'),
            stop: async () => console.log('TrackPlayer stub: stop called'),
            getTrack: async () => null,
            getState: async () => 'idle',
            getPosition: async () => 0,
            play: async () => {},
            pause: async () => {},
            reset: async () => {},
            add: async () => {},
            skip: async () => {},
            skipToNext: async () => {},
            skipToPrevious: async () => {},
            remove: async () => {},
            destroy: async () => {},
            updateOptions: async () => {},
            updateMetadataForTrack: async () => {},
            getQueue: async () => [],
            getCurrentTrack: async () => null,
            getDuration: async () => 0,
            getBufferedPosition: async () => 0,
            getVolume: async () => 1,
            setVolume: async () => {},
            getRate: async () => 1,
            setRate: async () => {},
            seekTo: async () => {},
            setRepeatMode: async () => {},
            getRepeatMode: async () => 0,
          };
          export default TrackPlayer;
          EOF
          echo "TrackPlayer stub installed for CI build"

      - name: Make Gradle wrapper executable
        run: chmod +x ./android/gradlew

      - name: Build Debug & Release (stable flags)
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
          JAVA_HOME: ${{ steps.j11.outputs.path }}
          NODE_OPTIONS: --openssl-legacy-provider
          GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.jvmargs='-Xmx3g -XX:+HeapDumpOnOutOfMemoryError' -Dorg.gradle.workers.max=2"
        run: |
          set -e
          cd android
          ./gradlew :app:assembleDebug  --build-cache --no-parallel --stacktrace
          ./gradlew :app:assembleRelease --build-cache --no-parallel --stacktrace

      - name: Print artifact sizes
        run: |
          ls -lh android/app/build/outputs/apk/debug/*.apk  || true
          ls -lh android/app/build/outputs/apk/release/*.apk || true

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: android/app/build/outputs/apk/debug/*.apk
          retention-days: 14

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: android/app/build/outputs/apk/release/*.apk
          retention-days: 14

  smoke-ubuntu:
    name: Android Smoke (Ubuntu)
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 35
    env:
      NODE_OPTIONS: --openssl-legacy-provider
      ADB_INSTALL_TIMEOUT: 20
      ANDROID_SERIAL: emulator-5554
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 11 (primary)
        id: j11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Setup Java 17 (sdkmanager tools)
        id: j17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Verify Java toolchains
        shell: bash
        run: |
          echo "Ubuntu Gradle (if needed) uses Java 11:"
          "${{ steps.j11.outputs.path }}/bin/java" -version
          echo "Ubuntu sdkmanager uses Java 17:"
          "${{ steps.j17.outputs.path }}/bin/java" -version

      - name: Setup Android SDK (Ubuntu)
        uses: android-actions/setup-android@v3

      - name: Guard Print Android SDK paths (Ubuntu)
        shell: bash
        run: |
          set -euo pipefail
          echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT:-<unset>}"
          echo "ANDROID_HOME=${ANDROID_HOME:-<unset>}"
          command -v sdkmanager || true
          command -v adb || true

      - name: Download Debug APK
        uses: actions/download-artifact@v4
        with:
          name: app-debug-apk
          path: artifacts/debug

      - name: Download Release APK
        uses: actions/download-artifact@v4
        with:
          name: app-release-apk
          path: artifacts/release

      - name: Find APK and set env
        run: |
          APK=$(find artifacts/debug -name "*.apk" -type f | head -1)
          if [ -z "$APK" ]; then
            echo "No APK found under artifacts/debug"
            exit 1
          fi
          echo "APK=$APK" | tee -a "$GITHUB_ENV"

      - name: Start emulator (20m ceiling, traced)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts/smoke-logs artifacts/summary

          EMU_CMD="emulator -avd ci_api_30 -ports 5554,5555 \
            -no-snapshot -no-snapshot-save -no-snapshot-load -wipe-data \
            -no-window -no-audio -no-boot-anim \
            -gpu swiftshader_indirect -camera-back none -netfast -no-metrics \
            -accel off -cores 2 -memory 2048 -qemu -m 1536 -verbose"

          echo "$EMU_CMD" > artifacts/smoke-logs/cmd.txt
          $EMU_CMD > artifacts/smoke-logs/emulator.txt 2>&1 & EMU_PID=$!
          echo "EMU_PID=$EMU_PID" >> "$GITHUB_ENV"

          boot_deadline=$((SECONDS+1200)) # 20m
          adb kill-server || true
          adb start-server

          # Trace loop for visibility
          : > artifacts/smoke-logs/trace.txt
          booted=0
          while [ $SECONDS -lt $boot_deadline ]; do
            adb devices -l >> artifacts/smoke-logs/trace.txt || true
            state=$(adb -s "$ANDROID_SERIAL" get-state 2>/dev/null || true)
            bc=$(adb -s "$ANDROID_SERIAL" shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
            if [ "$state" = "device" ] && [ "$bc" = "1" ]; then
              booted=1
              # Extra readiness polish
              adb -s "$ANDROID_SERIAL" shell settings put global animator_duration_scale 0.0 || true
              adb -s "$ANDROID_SERIAL" shell settings put global transition_animation_scale 0.0 || true
              adb -s "$ANDROID_SERIAL" shell settings put global window_animation_scale 0.0 || true
              adb -s "$ANDROID_SERIAL" shell svc power stayon true || true
              break
            fi
            sleep 5
          done
          echo "booted=$booted" >> "$GITHUB_ENV"


      - name: Install Debug APK
        shell: bash
        run: |
          echo "Installing APK..."
          adb install -r "$APK"

      - name: Determine package + launchable activity (robust)
        id: pkg
        shell: bash
        run: |
          set -euo pipefail
          # APK is already set from "Find APK and set env" step
          echo "apk=$APK" >> $GITHUB_OUTPUT

          # Generate APK metadata for logs
          mkdir -p artifacts/logs
          if command -v aapt >/dev/null 2>&1; then
            aapt dump badging "$APK" | tee artifacts/logs/apk_badging.txt
          fi

          # Prefer aapt, fallback to apkanalyzer
          if command -v aapt >/dev/null 2>&1; then
            PKG=$(aapt dump badging "$APK" | sed -n "s/.*package name='\([^']*\)'.*/\1/p" | head -n1)
          else
            if command -v apkanalyzer >/dev/null 2>&1; then
              PKG=$(apkanalyzer manifest application-id "$APK")
            else
              echo "Neither aapt nor apkanalyzer found"; exit 1
            fi
          fi
          echo "pkg=$PKG" >> $GITHUB_OUTPUT
          echo "Detected package: $PKG"

          # Resolve real launchable activity from the package
          # (uses the default LAUNCHER activity exposed by the app)
          ACT=$(adb shell cmd package resolve-activity -c android.intent.category.LAUNCHER "$PKG" \
                | sed -n "s/.*name=//p" | tr -d '\r' | head -n1)
          if [ -z "$ACT" ]; then
            # Fallback: common RN default
            ACT="$PKG/.MainActivity"
            echo "Fallback to $ACT"
          fi
          echo "act=$ACT" >> $GITHUB_OUTPUT
          echo "Launchable activity: $ACT"

      - name: Launch App (using resolved activity)
        id: launch
        shell: bash
        run: |
          # Record launch start time for TTJS metric
          LAUNCH_START=$(date +%s)
          echo "launch_start=$LAUNCH_START" >> $GITHUB_OUTPUT
          echo "App launch started at: $(date -d @$LAUNCH_START)"
          
          adb shell am start -n "${{ steps.pkg.outputs.act }}" || true
          sleep 10
          adb shell pidof "${{ steps.pkg.outputs.pkg }}" || (echo "App not running" && exit 1)

      - name: Assert React Native JS initialized + TTJS
        id: ttjs
        shell: bash
        run: |
          LAUNCH_START="${{ steps.launch.outputs.launch_start }}"
          
          # Wait up to 90s for the first JS log
          timeout 90s bash -c 'until adb logcat -d | grep -m1 "ReactNativeJS"; do sleep 5; done'
          
          # Calculate TTJS metric
          RN_START=$(date +%s)
          TTJS_SECONDS=$((RN_START - LAUNCH_START))
          echo "ttjs_seconds=$TTJS_SECONDS" >> $GITHUB_OUTPUT
          echo "✅ ReactNativeJS detected in logcat"
          echo "📊 TTJS (Time-to-first-ReactNativeJS): ${TTJS_SECONDS}s"

      - name: Assert main activity has focus
        shell: bash
        run: |
          PKG="${{ steps.pkg.outputs.pkg }}"
          CURRENT=$(adb shell dumpsys window | sed -n "s/.*mCurrentFocus=Window{[^ ]* [^ ]* \\([^}]*\\)}.*/\\1/p")
          echo "mCurrentFocus=$CURRENT"
          echo "$CURRENT" | grep -q "$PKG" || (echo "❌ Main activity not focused" && exit 1)

      - name: Collect deep diagnostics
        if: always()
        shell: bash
        run: |
          mkdir -p artifacts/logs
          # Full logcat since boot
          adb logcat -d > artifacts/logs/logcat_full.txt || true
          # Trim RN-only lines for quick read
          grep -i "ReactNative" artifacts/logs/logcat_full.txt > artifacts/logs/logcat_reactnative.txt || true
          # System state
          adb shell getprop > artifacts/logs/device_getprop.txt || true
          adb shell settings list global > artifacts/logs/settings_global.txt || true
          adb shell settings list system > artifacts/logs/settings_system.txt || true
          adb shell dumpsys activity > artifacts/logs/dumpsys_activity.txt || true
          adb shell dumpsys window > artifacts/logs/dumpsys_window.txt || true
          adb shell dumpsys package "${{ steps.pkg.outputs.pkg }}" > artifacts/logs/dumpsys_package.txt || true
          # App process tracking  
          adb shell pidof "${{ steps.pkg.outputs.pkg }}" > artifacts/logs/app_pid.txt || true
          # One heavy artifact for deep dive (10–30MB typical)
          adb bugreport artifacts/logs/bugreport.zip || true

      - name: Collect ANR & tombstones (if any)
        if: always()
        shell: bash
        run: |
          mkdir -p artifacts/logs
          adb shell ls -l /data/anr/ > artifacts/logs/anr_dir.txt 2>/dev/null || true
          # Pull ANRs if readable (emulators often allow)
          for f in $(adb shell ls /data/anr/ 2>/dev/null | tr -d '\r'); do
            adb shell cat "/data/anr/$f" > "artifacts/logs/anr_$f" 2>/dev/null || true
          done
          # Tombstones
          adb shell ls -l /data/tombstones/ > artifacts/logs/tombstones_dir.txt 2>/dev/null || true
          for f in $(adb shell ls /data/tombstones/ 2>/dev/null | tr -d '\r'); do
            adb shell cat "/data/tombstones/$f" > "artifacts/logs/$f" 2>/dev/null || true
          done

      - name: Upload smoke logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-logs
          path: artifacts/logs/**

      - name: Summarize smoke results
        if: always()
        shell: bash
        run: |
          mkdir -p artifacts/logs
          LOG=artifacts/logs/logcat_full.txt
          RN=artifacts/logs/logcat_reactnative.txt
          SUM="$GITHUB_STEP_SUMMARY"

          echo "## Smoke Summary" >> "$SUM"
          echo "" >> "$SUM"

          # RN JS presence + TTJS metric
          if grep -q "ReactNativeJS" "$RN" 2>/dev/null; then
            echo "✅ **ReactNativeJS detected** (JS runtime initialized)" >> "$SUM"
            # Add TTJS metric if available
            if [ -n "${{ steps.ttjs.outputs.ttjs_seconds }}" ]; then
              echo "📊 **TTJS (launch → first ReactNativeJS): ${{ steps.ttjs.outputs.ttjs_seconds }}s**" >> "$SUM"
            fi
          else
            echo "❌ **No ReactNativeJS logs detected** (JS may not have started)" >> "$SUM"
          fi

          # Main failures to highlight
          echo "" >> "$SUM"
          echo "### Notable log signals" >> "$SUM"
          grep -E "FATAL EXCEPTION|Process .* has died|ANR|E ReactNative|E AndroidRuntime" "$LOG" \
            | tail -n 40 \
            | sed 's/^/- /' >> "$SUM" || true

          # APK + pkg info
          if [ -f artifacts/logs/apk_badging.txt ]; then
            VER=$(sed -n "s/.*versionName='\([^']*\)'.*/\1/p" artifacts/logs/apk_badging.txt | head -n1)
            echo "" >> "$SUM"
            echo "**APK versionName**: \`$VER\`" >> "$SUM"
          fi
          
          echo "" >> "$SUM"
          echo "**Resolved Package:** \`${{ steps.pkg.outputs.pkg }}\`" >> "$SUM"
          echo "**Launch Activity:** \`${{ steps.pkg.outputs.act }}\`" >> "$SUM"

          echo "" >> "$SUM"
          echo "_Full logs available in the **smoke-logs** artifact (includes bugreport)._ " >> "$SUM"

      - name: Write summary.json
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts/summary
          run_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          boot_env="${booted:-0}"
          dbg=$(stat -c%s "android/app/build/outputs/apk/debug/app-debug.apk" 2>/dev/null || echo 0)
          rel=$(stat -c%s "android/app/build/outputs/apk/release/app-release.apk" 2>/dev/null || echo 0)
          printf '{ "run_id": %s, "run_url": "%s", "boot_ok": %s, "ttjs_s": null, "debug_apk_bytes": %s, "release_apk_bytes": %s }\n' \
            "${{ github.run_id }}" "$run_url" "$boot_env" "$dbg" "$rel" > artifacts/summary/summary.json

      - name: Teardown emulator (post)
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${EMU_PID:-}" ] && ps -p "$EMU_PID" > /dev/null 2>&1; then
            echo "Killing emulator pid $EMU_PID"
            kill "$EMU_PID" || true
            sleep 2
          fi
          adb -s "$ANDROID_SERIAL" emu kill || true

      - name: Upload quick summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: summary
          path: artifacts/summary/summary.json