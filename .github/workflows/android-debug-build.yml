name: Android Build & Smoke Test

env:
  NODE_OPTIONS: --openssl-legacy-provider
  ADB_INSTALL_TIMEOUT: 20

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop
      - feat/ccpm-framework
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    name: Build APKs
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17 (for Android SDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Prepare Android SDK (isolated, AGP 7.0.x safe)
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
        run: |
          set -e

          # Isolate SDK so AGP doesn't see newer "33x/34x/..." tool labels
          rm -rf "$ANDROID_SDK_ROOT"
          mkdir -p "$ANDROID_SDK_ROOT"

          echo "sdk.dir=$ANDROID_SDK_ROOT" > ./android/local.properties

          # Pin an older cmdline-tools revision compatible with AGP 7.0.x
          # (8512546 is known-good; avoid latest which emits newer repo XML/labels)
          CT_REV=8512546
          curl -sSL "https://dl.google.com/android/repository/commandlinetools-linux-${CT_REV}_latest.zip" -o cmdtools.zip
          unzip -q cmdtools.zip -d "$ANDROID_SDK_ROOT"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/bin" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true
          mv "$ANDROID_SDK_ROOT/cmdline-tools/lib" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true
          mv "$ANDROID_SDK_ROOT/cmdline-tools/source.properties" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true
          mv "$ANDROID_SDK_ROOT/cmdline-tools/NOTICE.txt" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true

          # Accept licenses non-interactively
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" --licenses >/dev/null

          # Install ONLY what AGP 7.0.4 needs
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" \
            "platforms;android-31" \
            "build-tools;31.0.0"

          echo "=== Installed build-tools ==="
          ls -1 "$ANDROID_SDK_ROOT/build-tools" || true

          # Guard: fail if anything other than 31.0.0 is present
          BT_COUNT=$(ls -1 "$ANDROID_SDK_ROOT/build-tools" | wc -l | tr -d ' ')
          if [ "$BT_COUNT" != "1" ] || [ ! -d "$ANDROID_SDK_ROOT/build-tools/31.0.0" ]; then
            echo "Unexpected build-tools present. Found:"
            ls -1 "$ANDROID_SDK_ROOT/build-tools" || true
            exit 1
          fi

      - name: Print versions
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
        run: |
          echo "JAVA:" && java -version
          echo "Gradle wrapper:" && ./android/gradlew -v
          echo "SDK Root: $ANDROID_SDK_ROOT"
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" --list | head -n 20 || true

      - name: Switch to JDK 11 (for Gradle)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Use Node 18 (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Prime Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Ensure Gradle build cache on
        run: |
          mkdir -p ~/.gradle
          {
            echo "org.gradle.caching=true"
            echo "org.gradle.parallel=false"
          } >> ~/.gradle/gradle.properties
          
      - name: Install Node dependencies
        run: npm install --legacy-peer-deps

      - name: Install TrackPlayer stub (TEMP for CI)
        run: |
          # Create TrackPlayer stub for CI builds
          mkdir -p node_modules/react-native-track-player
          cat > node_modules/react-native-track-player/package.json << 'EOF'
          {
            "name": "react-native-track-player",
            "version": "0.0.0-stub",
            "description": "Temporary stub for react-native-track-player (CI build only)",
            "main": "index.js",
            "private": true
          }
          EOF
          cat > node_modules/react-native-track-player/index.js << 'EOF'
          // TEMP STUB: react-native-track-player disabled for CI build
          const TrackPlayer = {
            setupPlayer: async () => console.log('TrackPlayer stub: setupPlayer called'),
            stop: async () => console.log('TrackPlayer stub: stop called'),
            getTrack: async () => null,
            getState: async () => 'idle',
            getPosition: async () => 0,
            play: async () => {},
            pause: async () => {},
            reset: async () => {},
            add: async () => {},
            skip: async () => {},
            skipToNext: async () => {},
            skipToPrevious: async () => {},
            remove: async () => {},
            destroy: async () => {},
            updateOptions: async () => {},
            updateMetadataForTrack: async () => {},
            getQueue: async () => [],
            getCurrentTrack: async () => null,
            getDuration: async () => 0,
            getBufferedPosition: async () => 0,
            getVolume: async () => 1,
            setVolume: async () => {},
            getRate: async () => 1,
            setRate: async () => {},
            seekTo: async () => {},
            setRepeatMode: async () => {},
            getRepeatMode: async () => 0,
          };
          export default TrackPlayer;
          EOF
          echo "TrackPlayer stub installed for CI build"

      - name: Make Gradle wrapper executable
        run: chmod +x ./android/gradlew

      - name: Build Debug & Release (stable flags)
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
          NODE_OPTIONS: --openssl-legacy-provider
          GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.jvmargs='-Xmx3g -XX:+HeapDumpOnOutOfMemoryError' -Dorg.gradle.workers.max=2"
        run: |
          set -e
          cd android
          ./gradlew :app:assembleDebug  --build-cache --no-parallel --stacktrace
          ./gradlew :app:assembleRelease --build-cache --no-parallel --stacktrace

      - name: Print artifact sizes
        run: |
          ls -lh android/app/build/outputs/apk/debug/*.apk  || true
          ls -lh android/app/build/outputs/apk/release/*.apk || true

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: android/app/build/outputs/apk/debug/*.apk
          retention-days: 7

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: android/app/build/outputs/apk/release/*.apk
          retention-days: 7

  smoke-test:
    name: Android Smoke Test (API 31)
    needs: build
    runs-on: ubuntu-22.04
    timeout-minutes: 35
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Debug APK
        uses: actions/download-artifact@v4
        with:
          name: app-debug-apk
          path: artifacts/debug

      - name: Setup JDK 17 (for Android SDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Android AVD
        uses: actions/cache@v4
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
            ~/.android/cache/*
          key: avd-${{ runner.os }}-api31-x86_64-v1

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: "platforms;android-31 system-images;android-31;google_apis;x86_64 platform-tools emulator build-tools;31.0.0"

      - name: Start Emulator (attempt 1)
        id: emu1
        continue-on-error: true
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 31
          arch: x86_64
          profile: pixel_5
          target: google_apis
          disable-animations: true
          force-avd-creation: true
          emulator-options: >
            -no-snapshot-save
            -no-boot-anim
            -camera-back none
            -gpu swiftshader_indirect
            -selinux permissive
            -qemu -m 2048
          script: |
            adb wait-for-device
            timeout 600s bash -c 'until adb shell getprop sys.boot_completed | grep -m 1 "1"; do sleep 5; done'
            adb shell input keyevent 82
            echo "Emulator started successfully (attempt 1)"

      - name: Kill Emulator (cleanup attempt 1)
        if: steps.emu1.outcome == 'failure'
        run: |
          adb emu kill || true
          pkill -9 emulator || true
          sleep 10

      - name: Start Emulator (attempt 2, fallback flags)
        if: steps.emu1.outcome == 'failure'
        id: emu2
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 31
          arch: x86_64
          profile: pixel_5
          target: google_apis
          disable-animations: true
          force-avd-creation: true
          emulator-options: >
            -no-snapshot
            -noaudio
            -no-boot-anim
            -gpu off
            -accel off
            -camera-back none
            -netspeed full
            -netdelay none
            -qemu -m 2048
          script: |
            adb wait-for-device
            timeout 600s bash -c 'until adb shell getprop sys.boot_completed | grep -m 1 "1"; do sleep 5; done'
            adb shell input keyevent 82
            echo "Emulator started successfully (attempt 2)"

      - name: Determine Package Name
        id: pkg
        if: always()
        shell: bash
        run: |
          APK=$(ls artifacts/debug/*.apk | head -n1)
          PKG=$(aapt dump badging "$APK" | sed -n "s/.*package name='\([^']*\)'.*/\1/p")
          echo "apk=$APK" >> $GITHUB_OUTPUT
          echo "pkg=$PKG" >> $GITHUB_OUTPUT
          echo "APK: $APK"
          echo "Package: $PKG"

      - name: Install Debug APK
        if: always() && steps.pkg.outputs.apk != ''
        run: adb install -r "${{ steps.pkg.outputs.apk }}"

      - name: Launch App
        if: always() && steps.pkg.outputs.pkg != ''
        run: |
          adb shell am start -n "${{ steps.pkg.outputs.pkg }}/.MainActivity" || true
          sleep 10
          adb shell pidof ${{ steps.pkg.outputs.pkg }} || (echo "App not running" && exit 1)

      - name: Capture logcat & dumpsys
        if: always()
        run: |
          mkdir -p artifacts/logs
          adb logcat -d > artifacts/logs/logcat.txt || true
          adb shell dumpsys activity > artifacts/logs/dumpsys_activity.txt || true
          if [ -n "${{ steps.pkg.outputs.pkg }}" ]; then
            adb shell dumpsys package ${{ steps.pkg.outputs.pkg }} > artifacts/logs/dumpsys_package.txt || true
          fi
          tail -500 artifacts/logs/logcat.txt > artifacts/logs/logcat_tail.txt || true

      - name: Upload Smoke Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-logs
          path: artifacts/logs/**
          if-no-files-found: ignore

      - name: Upload IDs artifact
        if: always()
        run: |
          echo "${{ github.run_id }}" > RUN_ID.txt
          echo "${{ github.job }}" > JOB_ID.txt

      - name: Upload run IDs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ids
          path: |
            RUN_ID.txt
            JOB_ID.txt

      - name: Report IDs
        if: always()
        run: |
          echo "RUN_ID: ${{ github.run_id }}"
          echo "Smoke JOB_ID: ${{ github.job }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Repository: ${{ github.repository }}"