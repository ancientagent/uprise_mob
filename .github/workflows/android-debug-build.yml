name: Android Build & Smoke Test

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop
      - feat/ccpm-framework
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    name: Build APKs
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17 (for Android SDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Prepare Android SDK (isolated, AGP 7.0.x safe)
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
        run: |
          set -e

          # Isolate SDK so AGP doesn't see newer "33x/34x/..." tool labels
          rm -rf "$ANDROID_SDK_ROOT"
          mkdir -p "$ANDROID_SDK_ROOT"

          echo "sdk.dir=$ANDROID_SDK_ROOT" > ./android/local.properties

          # Pin an older cmdline-tools revision compatible with AGP 7.0.x
          # (8512546 is known-good; avoid latest which emits newer repo XML/labels)
          CT_REV=8512546
          curl -sSL "https://dl.google.com/android/repository/commandlinetools-linux-${CT_REV}_latest.zip" -o cmdtools.zip
          unzip -q cmdtools.zip -d "$ANDROID_SDK_ROOT"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/bin" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true
          mv "$ANDROID_SDK_ROOT/cmdline-tools/lib" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true
          mv "$ANDROID_SDK_ROOT/cmdline-tools/source.properties" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true
          mv "$ANDROID_SDK_ROOT/cmdline-tools/NOTICE.txt" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true

          # Accept licenses non-interactively
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" --licenses >/dev/null

          # Install ONLY what AGP 7.0.4 needs
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" \
            "platforms;android-31" \
            "build-tools;31.0.0"

          echo "=== Installed build-tools ==="
          ls -1 "$ANDROID_SDK_ROOT/build-tools" || true

          # Guard: fail if anything other than 31.0.0 is present
          BT_COUNT=$(ls -1 "$ANDROID_SDK_ROOT/build-tools" | wc -l | tr -d ' ')
          if [ "$BT_COUNT" != "1" ] || [ ! -d "$ANDROID_SDK_ROOT/build-tools/31.0.0" ]; then
            echo "Unexpected build-tools present. Found:"
            ls -1 "$ANDROID_SDK_ROOT/build-tools" || true
            exit 1
          fi

      - name: Print versions
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
        run: |
          echo "JAVA:" && java -version
          echo "Gradle wrapper:" && ./android/gradlew -v
          echo "SDK Root: $ANDROID_SDK_ROOT"
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" --list | head -n 20 || true

      - name: Switch to JDK 11 (for Gradle)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Node dependencies
        run: npm install --legacy-peer-deps

      - name: Install TrackPlayer stub (TEMP for CI)
        run: |
          # Create TrackPlayer stub for CI builds
          mkdir -p node_modules/react-native-track-player
          cat > node_modules/react-native-track-player/package.json << 'EOF'
          {
            "name": "react-native-track-player",
            "version": "0.0.0-stub",
            "description": "Temporary stub for react-native-track-player (CI build only)",
            "main": "index.js",
            "private": true
          }
          EOF
          cat > node_modules/react-native-track-player/index.js << 'EOF'
          // TEMP STUB: react-native-track-player disabled for CI build
          const TrackPlayer = {
            setupPlayer: async () => console.log('TrackPlayer stub: setupPlayer called'),
            stop: async () => console.log('TrackPlayer stub: stop called'),
            getTrack: async () => null,
            getState: async () => 'idle',
            getPosition: async () => 0,
            play: async () => {},
            pause: async () => {},
            reset: async () => {},
            add: async () => {},
            skip: async () => {},
            skipToNext: async () => {},
            skipToPrevious: async () => {},
            remove: async () => {},
            destroy: async () => {},
            updateOptions: async () => {},
            updateMetadataForTrack: async () => {},
            getQueue: async () => [],
            getCurrentTrack: async () => null,
            getDuration: async () => 0,
            getBufferedPosition: async () => 0,
            getVolume: async () => 1,
            setVolume: async () => {},
            getRate: async () => 1,
            setRate: async () => {},
            seekTo: async () => {},
            setRepeatMode: async () => {},
            getRepeatMode: async () => 0,
          };
          export default TrackPlayer;
          EOF
          echo "TrackPlayer stub installed for CI build"

      - name: Make Gradle wrapper executable
        run: chmod +x ./android/gradlew

      - name: Build Debug and Release APKs
        working-directory: android
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
          NODE_OPTIONS: --openssl-legacy-provider
        run: |
          export JAVA_TOOL_OPTIONS=""
          ./gradlew :app:clean :app:assembleDebug :app:assembleRelease --no-daemon --stacktrace
        timeout-minutes: 20

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: android/app/build/outputs/apk/debug/*.apk
          retention-days: 7

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: android/app/build/outputs/apk/release/*.apk
          retention-days: 7

  smoke-test:
    name: Android Smoke Test (API 31)
    needs: build
    runs-on: ubuntu-22.04
    timeout-minutes: 35
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Debug APK
        uses: actions/download-artifact@v4
        with:
          name: app-debug-apk
          path: ./apk_debug

      - name: Setup JDK 17 (for Android SDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK for emulator
        uses: android-actions/setup-android@v3
        with:
          packages: "platforms;android-31 system-images;android-31;google_apis;x86_64 platform-tools emulator build-tools;31.0.0"

      - name: Run smoke test on emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 31
          target: google_apis
          arch: x86_64
          profile: pixel_5
          ram-size: 2048M
          disk-size: 4096M
          force-avd-creation: true
          disable-animations: true
          emulator-options: >
            -no-snapshot -wipe-data -noaudio -no-boot-anim
            -camera-back none -camera-front none
          script: |
            set -e
            echo "=== Wait for device ==="
            adb wait-for-device

            echo "=== Wait for sys.boot_completed ==="
            BOOT_OK=0
            for i in $(seq 1 240); do
              v=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
              if [ "$v" = "1" ]; then BOOT_OK=1; break; fi
              sleep 2
            done
            [ "$BOOT_OK" = "1" ] || { echo "Emulator never booted (sys.boot_completed)"; exit 1; }

            echo "=== Wait for bootanim stopped ==="
            for i in $(seq 1 240); do
              s=$(adb shell getprop init.svc.bootanim 2>/dev/null | tr -d '\r')
              if [ "$s" = "stopped" ]; then break; fi
              sleep 2
            done

            echo "=== Install debug APK ==="
            APK="$(ls apk_debug/*.apk | head -n1)"
            echo "Installing $APK"
            adb install -r "$APK"

            echo "=== Detect applicationId ==="
            APP_ID=$(grep -m1 'applicationId ' android/app/build.gradle | sed -E 's/.*applicationId[[:space:]]+"([^"]+)".*/\1/')
            [ -n "$APP_ID" ] || APP_ID="com.app.uprise"
            echo "APP_ID=$APP_ID"

            echo "=== Launch MainActivity ==="
            adb shell am start -n "$APP_ID"/.MainActivity || adb shell monkey -p "$APP_ID" -c android.intent.category.LAUNCHER 1
            sleep 8

            echo "=== Markers ==="
            echo "sys.boot_completed=$(adb shell getprop sys.boot_completed | tr -d '\r')"
            echo "pm path: $(adb shell pm path "$APP_ID" | tr -d '\r' || true)"
            adb shell dumpsys activity top | head -n 120 || true

      - name: Collect smoke logs
        if: always()
        run: |
          set -e
          adb logcat -d > logcat.txt || true
          adb shell dumpsys package "$APP_ID" > dumpsys_package.txt 2>/dev/null || true
          adb shell dumpsys activity activities > dumpsys_activity.txt 2>/dev/null || true
          adb shell settings list global > settings_global.txt 2>/dev/null || true
          adb shell getprop > getprop.txt 2>/dev/null || true

      - name: Upload smoke logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-diags
          path: |
            logcat.txt
            dumpsys_package.txt
            dumpsys_activity.txt
            settings_global.txt
            getprop.txt

      - name: Upload smoke summary
        if: always()
        run: |
          tail -n 200 logcat.txt | tee SMOKE_TAIL.txt || true
        shell: bash

      - name: Upload smoke markers
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-logs
          path: SMOKE_TAIL.txt

      - name: Upload IDs artifact
        if: always()
        run: |
          echo "${{ github.run_id }}" > RUN_ID.txt
          echo "${{ github.job }}" > JOB_ID.txt

      - name: Upload run IDs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ids
          path: |
            RUN_ID.txt
            JOB_ID.txt

      - name: Report IDs
        if: always()
        run: |
          echo "RUN_ID: ${{ github.run_id }}"
          echo "Smoke JOB_ID: ${{ github.job }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Repository: ${{ github.repository }}"