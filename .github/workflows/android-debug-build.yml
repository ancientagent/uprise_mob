name: Android CI

on:
  push:
    branches: [ main, develop, feat/**, fix/** ]
  pull_request:

env:
  ANDROID_BUILD_TOOLS: "31.0.0"

jobs:
  # Guardrail: ensure no hard-coded build-tools versions drift in repo
  guardrails:
    name: "Guard: build-tools pinning"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Fail if build-tools version drift is present
        shell: bash
        run: |
          # Scan workflow files for hard-coded build-tools versions (not env var references)
          set -euo pipefail
          violations=$(git grep -n 'build-tools;[0-9]' -- '*.yml' '*.yaml' '*.gradle' '*.properties' || true)
          if [[ -n "$violations" ]]; then
            # Filter out acceptable patterns: env var references and the pinned version
            remaining=$(echo "$violations" | grep -Ev "build-tools;\$\{\{\s*env\.ANDROID_BUILD_TOOLS\s*\}\}")
            if [[ -n "$remaining" ]]; then
              echo "::error::Found hard-coded build-tools in workflow/config files:"
              echo "$remaining" 
              echo "Use '\${{ env.ANDROID_BUILD_TOOLS }}' instead of hard-coded versions"
              exit 1
            fi
          fi
          echo "Guard OK: No hard-coded build-tools versions found in workflow files"

  build:
    name: Build Debug & Release APKs
    runs-on: ubuntu-latest
    needs: guardrails
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'

      - name: Setup JDK 17 (for Android SDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install build-tools pinned
        shell: bash
        run: |
          sdkmanager --install "build-tools;${{ env.ANDROID_BUILD_TOOLS }}"
          echo "${ANDROID_SDK_ROOT}/build-tools/${{ env.ANDROID_BUILD_TOOLS }}" >> "$GITHUB_PATH"
          "${ANDROID_SDK_ROOT}/build-tools/${{ env.ANDROID_BUILD_TOOLS }}/apksigner" --version

      - name: Switch to JDK 11 (for Gradle)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Cache Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Install deps
        shell: bash
        run: |
          set -e
          corepack enable
          yarn install --frozen-lockfile --network-timeout 600000

      - name: Build APKs
        shell: bash
        run: |
          chmod +x ./android/gradlew
          cd android
          ./gradlew :app:assembleDebug :app:assembleRelease --no-daemon --stacktrace

      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p artifacts/debug artifacts/release
          cp android/app/build/outputs/apk/debug/app-debug.apk artifacts/debug/ || true
          cp android/app/build/outputs/apk/release/app-release.apk artifacts/release/ || true

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: artifacts/debug/app-debug.apk
          if-no-files-found: warn

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: artifacts/release/app-release.apk
          if-no-files-found: warn

  smoke-test:
    name: Android Smoke Test (macOS HVF, API 30 default / Pixel 5)
    runs-on: macos-13
    needs: build
    timeout-minutes: 35
    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK 17 (for Android SDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install build-tools pinned
        shell: bash
        run: |
          sdkmanager --install "build-tools;${{ env.ANDROID_BUILD_TOOLS }}"
          echo "${ANDROID_SDK_ROOT}/build-tools/${{ env.ANDROID_BUILD_TOOLS }}" >> "$GITHUB_PATH"
          "${ANDROID_SDK_ROOT}/build-tools/${{ env.ANDROID_BUILD_TOOLS }}/apksigner" --version

      - name: Download Debug APK
        uses: actions/download-artifact@v4
        with:
          name: app-debug-apk
          path: artifacts/debug

      - name: Download Release APK
        uses: actions/download-artifact@v4
        with:
          name: app-release-apk
          path: artifacts/release

      - name: Create AVD (API 30, default, x86_64, Pixel 5)
        shell: bash
        run: |
          set -euo pipefail
          sdkmanager --install "system-images;android-30;default;x86_64"
          echo "no" | avdmanager create avd -n ci_api_30 -k "system-images;android-30;default;x86_64" --device "pixel_5"

      - name: Boot Emulator (HVF) + ADB hygiene
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts/smoke-logs artifacts/ids artifacts/summary

          adb kill-server || true
          # Cold boot, HVF, fast/no-ui, 1GB RAM via qemu
          $ANDROID_SDK_ROOT/emulator/emulator -avd ci_api_30 \
            -no-snapshot -no-snapshot-save -no-window -no-audio -no-boot-anim \
            -gpu swiftshader_indirect -camera-back none -netfast -no-metrics \
            -qemu -m 1024 \
            -accel hvf -verbose > artifacts/smoke-logs/emulator.txt 2>&1 &
          EMU_PID=$!

          boot_deadline=$((SECONDS+360))
          adb start-server
          adb wait-for-device || true
          while [ $SECONDS -lt $boot_deadline ]; do
            booted=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
            if [ "$booted" = "1" ]; then break; fi
            sleep 5
          done

          if [ "${booted:-0}" != "1" ]; then
            echo "boot_ok=false" > artifacts/summary/summary.env
            echo "BOOT_FAILED=1" >> $GITHUB_ENV
          else
            echo "boot_ok=true" > artifacts/summary/summary.env
            echo "BOOT_FAILED=0" >> $GITHUB_ENV
          fi

          # Speed up UI if booted
          if [ "${booted:-0}" = "1" ]; then
            adb shell settings put global window_animation_scale 0 || true
            adb shell settings put global transition_animation_scale 0 || true
            adb shell settings put global animator_duration_scale 0 || true
          fi

      - name: Install APKs
        if: env.BOOT_FAILED == '0'
        shell: bash
        run: |
          set -e
          adb install -r "artifacts/debug/app-debug.apk"
          if [ -f "artifacts/release/app-release.apk" ]; then
            adb install -r "artifacts/release/app-release.apk" || true
          fi

      - name: Launch Debug & Capture TTJS
        if: env.BOOT_FAILED == '0'
        shell: bash
        run: |
          set -euo pipefail
          # Ensure aapt available
          AAPT="${ANDROID_SDK_ROOT}/build-tools/${{ env.ANDROID_BUILD_TOOLS }}/aapt"
          APP_ID=$($AAPT dump badging artifacts/debug/app-debug.apk | awk -F"'" '/package: name=/{print $2}')
          if [ -z "$APP_ID" ]; then
            echo "app_id=" >> artifacts/summary/summary.env
            exit 0
          fi

          adb logcat -c || true
          adb logcat -v time > artifacts/smoke-logs/logcat.txt 2>&1 &
          LOG_PID=$!

          adb shell monkey -p "$APP_ID" -c android.intent.category.LAUNCHER 1

          start_ts=$SECONDS
          deadline=$((SECONDS+60))
          ttjs_s=""
          while [ $SECONDS -lt $deadline ]; do
            if grep -q "ReactNativeJS: Running" artifacts/smoke-logs/logcat.txt; then
              ttjs_s=$((SECONDS-start_ts))
              break
            fi
            sleep 1
          done

          kill $LOG_PID || true
          echo "app_id=$APP_ID" >> artifacts/summary/summary.env
          echo "ttjs_s=${ttjs_s:-}" >> artifacts/summary/summary.env

      - name: Build summary.json & IDs
        shell: bash
        run: |
          set -euo pipefail
          SHA_SHORT=$(git rev-parse --short HEAD)
          DEBUG_SIZE=$( [ -f artifacts/debug/app-debug.apk ] && stat -f%z artifacts/debug/app-debug.apk || echo "0" )
          RELEASE_SIZE=$( [ -f artifacts/release/app-release.apk ] && stat -f%z artifacts/release/app-release.apk || echo "0" )
          RUN_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"

          # Get min/target SDK from aapt if possible
          AAPT="${ANDROID_SDK_ROOT}/build-tools/${{ env.ANDROID_BUILD_TOOLS }}/aapt"
          MIN_SDK=$($AAPT dump badging artifacts/debug/app-debug.apk | awk -F"'" '/sdkVersion/{print $2}')
          TGT_SDK=$($AAPT dump badging artifacts/debug/app-debug.apk | awk -F"'" '/targetSdkVersion/{print $2}')

          source artifacts/summary/summary.env || true
          BOOT_OK="${boot_ok:-false}"

          cat > artifacts/summary/summary.json <<JSON
          {
            "commit": "$SHA_SHORT",
            "boot_ok": $BOOT_OK,
            "ttjs_s": ${ttjs_s:-null},
            "debug_apk_bytes": $DEBUG_SIZE,
            "release_apk_bytes": $RELEASE_SIZE,
            "app_id": "${app_id:-""}",
            "min_sdk": "${MIN_SDK:-""}",
            "target_sdk": "${TGT_SDK:-""}",
            "run_id": "$GITHUB_RUN_ID",
            "run_url": "$RUN_URL"
          }
          JSON

          echo "$GITHUB_RUN_ID" > artifacts/ids/RUN_ID.txt
          echo "$RUN_URL" > artifacts/ids/RUN_URL.txt

      - name: Upload smoke-logs
        uses: actions/upload-artifact@v4
        with:
          name: smoke-logs
          path: artifacts/smoke-logs/

      - name: Upload ids
        uses: actions/upload-artifact@v4
        with:
          name: ids
          path: artifacts/ids/

      - name: Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: summary
          path: artifacts/summary/summary.json

      - name: Step Summary
        shell: bash
        run: |
          source artifacts/summary/summary.env || true
          echo "### Smoke Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Boot OK: ${boot_ok:-false}" >> $GITHUB_STEP_SUMMARY
          echo "- TTJS (s): ${ttjs_s:-unknown}" >> $GITHUB_STEP_SUMMARY
          echo "- Debug APK bytes: $( [ -f artifacts/debug/app-debug.apk ] && stat -f%z artifacts/debug/app-debug.apk || echo "0")" >> $GITHUB_STEP_SUMMARY
          echo "- Release APK bytes: $( [ -f artifacts/release/app-release.apk ] && stat -f%z artifacts/release/app-release.apk || echo "0")" >> $GITHUB_STEP_SUMMARY
          
          # Get min/target SDK from aapt if possible
          AAPT="${ANDROID_SDK_ROOT}/build-tools/${{ env.ANDROID_BUILD_TOOLS }}/aapt"
          MIN_SDK=$($AAPT dump badging artifacts/debug/app-debug.apk | awk -F"'" '/sdkVersion/{print $2}' || echo "unknown")
          TGT_SDK=$($AAPT dump badging artifacts/debug/app-debug.apk | awk -F"'" '/targetSdkVersion/{print $2}' || echo "unknown")
          echo "- minSdk: ${MIN_SDK:-unknown}" >> $GITHUB_STEP_SUMMARY
          echo "- targetSdk: ${TGT_SDK:-unknown}" >> $GITHUB_STEP_SUMMARY

      - name: Teardown ADB/Emu
        if: always()
        shell: bash
        run: |
          adb emu kill || true
          adb kill-server || true