name: Android Build & Smoke Test

env:
  NODE_OPTIONS: --openssl-legacy-provider
  ADB_INSTALL_TIMEOUT: 20
  SMOKE_SOFT_FAIL: ${{ github.event.inputs.smoke_soft_fail }}
  ANDROID_BUILD_TOOLS: "31.0.0"
  ANDROID_SERIAL: emulator-5554

on:
  workflow_dispatch:
    inputs:
      smoke_soft_fail:
        description: "Mark smoke test neutral on failure (upload logs anyway)"
        required: false
        default: "false"
  push:
    branches:
      - main
      - develop
      - feat/ccpm-framework
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    name: Build APKs
    runs-on: ubuntu-latest
    timeout-minutes: 35

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 11 (Gradle)
        id: j11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Setup Java 17 (sdkmanager tools)
        id: j17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Verify Java toolchains
        shell: bash
        run: |
          echo "Gradle should use Java 11:"
          "${{ steps.j11.outputs.path }}/bin/java" -version
          echo "sdkmanager should use Java 17:"
          "${{ steps.j17.outputs.path }}/bin/java" -version


      - name: Bootstrap Android cmdline-tools r8 (8092744)
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_on: error
          shell: bash
          command: |
            set -euo pipefail
            # Prepare SDK root
            export ANDROID_SDK_ROOT="$HOME/android-sdk"
            mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
            cd "$ANDROID_SDK_ROOT"

            # Download cmdline-tools r8 (8092744) for macOS/Linux
            # macOS and Linux use same archive name pattern; mac runners need 'darwin', ubuntu 'linux'
            OS=$(uname | tr '[:upper:]' '[:lower:]')
            if [[ "$OS" == "darwin" ]]; then
              URL="https://dl.google.com/android/repository/commandlinetools-mac-8092744_latest.zip"
            else
              URL="https://dl.google.com/android/repository/commandlinetools-linux-8092744_latest.zip"
            fi

            echo "🔄 Downloading Android cmdline-tools (attempt ${{ github.run_attempt || 1 }}/3)"
            curl -fsSL "$URL" -o cmdtools.zip
            unzip -q cmdtools.zip -d cmdline-tools-tmp
            # Move to canonical 'cmdline-tools/r8'
            mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/r8"
            mv cmdline-tools-tmp/cmdline-tools/* "$ANDROID_SDK_ROOT/cmdline-tools/r8/"
            rm -rf cmdline-tools-tmp cmdtools.zip

            # Path wiring to ensure we always use r8 sdkmanager
            echo "$ANDROID_SDK_ROOT/cmdline-tools/r8/bin" >> "$GITHUB_PATH"
            echo "$ANDROID_SDK_ROOT/platform-tools" >> "$GITHUB_PATH"
            echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
            
            # Set local.properties for Gradle
            echo "sdk.dir=$ANDROID_SDK_ROOT" > ${{ github.workspace }}/android/local.properties
        env:
          JAVA_HOME: ${{ steps.j17.outputs.path }}

      - name: Accept SDK licenses (r8)
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 2
          retry_on: error
          shell: bash
          command: |
            set -euo pipefail
            echo "🔄 Accepting SDK licenses non-interactively..."
            ( echo "y"; echo "y"; echo "y"; echo "y"; echo "y"; echo "y"; echo "y"; echo "y" ) | sdkmanager --licenses || true
        env:
          JAVA_HOME: ${{ steps.j17.outputs.path }}

      - name: Install platform-tools + build-tools + emulator + platforms (r8)
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          retry_on: error
          shell: bash
          command: |
            set -euo pipefail
            echo "🔄 Installing Android SDK components (attempt ${{ github.run_attempt || 1 }}/3)"
            sdkmanager --install "platform-tools" \
              "build-tools;${{ env.ANDROID_BUILD_TOOLS }}" \
              "emulator" \
              "platforms;android-31" \
              "system-images;android-30;default;x86_64"
            # Prove r8 is in effect and apksigner exists at pinned version
            echo "✅ Verifying apksigner installation"
            "${ANDROID_SDK_ROOT}/build-tools/${{ env.ANDROID_BUILD_TOOLS }}/apksigner" --version
        env:
          JAVA_HOME: ${{ steps.j17.outputs.path }}

      - name: Print versions
        env:
          JAVA_HOME: ${{ steps.j11.outputs.path }}
        run: |
          echo "JAVA (Gradle):" && java -version
          echo "Gradle wrapper:" && ./android/gradlew -v
          echo "SDK Root: $ANDROID_SDK_ROOT"

      - name: Use Node 18 (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Prime Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Ensure Gradle build cache on
        run: |
          mkdir -p ~/.gradle
          {
            echo "org.gradle.caching=true"
            echo "org.gradle.parallel=true"
            echo "org.gradle.workers.max=3"
            echo "org.gradle.daemon=true"
            echo "org.gradle.configureondemand=true"
          } >> ~/.gradle/gradle.properties
          
      - name: Pre-build Validation
        shell: bash
        run: |
          set -euo pipefail
          echo "🔍 Pre-build validation checks"
          
          # Check package.json consistency
          echo "📦 Checking package.json consistency..."
          npm ls --depth=0 --only=prod > /dev/null || echo "⚠️ Package dependency issues detected"
          
          # Check for critical vulnerabilities  
          echo "🛡️ Checking for critical security vulnerabilities..."
          CRITICAL_COUNT=$(npm audit --audit-level=critical --json 2>/dev/null | jq '.metadata.vulnerabilities.critical // 0' || echo "0")
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "❌ $CRITICAL_COUNT critical vulnerabilities found"
            npm audit --audit-level=critical
          else
            echo "✅ No critical vulnerabilities detected"
          fi
          
          # Validate React Native project structure
          echo "📱 Validating React Native project structure..."
          test -f "index.js" || { echo "❌ Missing index.js"; exit 1; }
          test -f "android/build.gradle" || { echo "❌ Missing android/build.gradle"; exit 1; }
          test -d "android/app/src/main" || { echo "❌ Missing Android app structure"; exit 1; }
          echo "✅ Project structure valid"
          
          # Check Android SDK availability
          echo "🤖 Validating Android SDK components..."
          if [ -n "${ANDROID_SDK_ROOT:-}" ] && [ -d "$ANDROID_SDK_ROOT" ]; then
            echo "✅ Android SDK root found: $ANDROID_SDK_ROOT"
          else
            echo "⚠️ Android SDK not yet configured (will be set up in next steps)"
          fi

      - name: Install Node dependencies
        run: npm install --legacy-peer-deps

      - name: Install TrackPlayer stub (TEMP for CI)
        run: |
          # Create TrackPlayer stub for CI builds
          mkdir -p node_modules/react-native-track-player
          cat > node_modules/react-native-track-player/package.json << 'EOF'
          {
            "name": "react-native-track-player",
            "version": "0.0.0-stub",
            "description": "Temporary stub for react-native-track-player (CI build only)",
            "main": "index.js",
            "private": true
          }
          EOF
          cat > node_modules/react-native-track-player/index.js << 'EOF'
          // TEMP STUB: react-native-track-player disabled for CI build
          const TrackPlayer = {
            setupPlayer: async () => console.log('TrackPlayer stub: setupPlayer called'),
            stop: async () => console.log('TrackPlayer stub: stop called'),
            getTrack: async () => null,
            getState: async () => 'idle',
            getPosition: async () => 0,
            play: async () => {},
            pause: async () => {},
            reset: async () => {},
            add: async () => {},
            skip: async () => {},
            skipToNext: async () => {},
            skipToPrevious: async () => {},
            remove: async () => {},
            destroy: async () => {},
            updateOptions: async () => {},
            updateMetadataForTrack: async () => {},
            getQueue: async () => [],
            getCurrentTrack: async () => null,
            getDuration: async () => 0,
            getBufferedPosition: async () => 0,
            getVolume: async () => 1,
            setVolume: async () => {},
            getRate: async () => 1,
            setRate: async () => {},
            seekTo: async () => {},
            setRepeatMode: async () => {},
            getRepeatMode: async () => 0,
          };
          export default TrackPlayer;
          EOF
          echo "TrackPlayer stub installed for CI build"

      - name: Make Gradle wrapper executable
        run: chmod +x ./android/gradlew

      - name: Build Debug & Release (with build watchdog)
        env:
          JAVA_HOME: ${{ steps.j11.outputs.path }}
          NODE_OPTIONS: --openssl-legacy-provider
          GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.jvmargs='-Xmx4g -XX:MaxMetaspaceSize=1g -XX:+UseG1GC' -Dorg.gradle.workers.max=3 -Dorg.gradle.parallel=true"
        run: |
          set -e
          cd android
          
          # Build watchdog function with diagnostics
          build_with_watchdog() {
            local task="$1"
            local timeout_min=20
            ./gradlew "$task" --build-cache --no-parallel --stacktrace &
            local gradle_pid=$!
            
            # Monitor build progress
            local elapsed=0
            while kill -0 $gradle_pid 2>/dev/null; do
              sleep 60
              elapsed=$((elapsed + 1))
              echo "📊 Build progress: ${elapsed}min / ${timeout_min}min"
              
              if [ $elapsed -ge $timeout_min ]; then
                echo "❌ Build timeout after ${timeout_min}min - killing Gradle"
                kill -9 $gradle_pid 2>/dev/null || true
                
                # Diagnostic dump
                echo "🔍 Process tree at timeout:"
                pgrep -f gradle | xargs -r ps -fp || true
                echo "🔍 Gradle daemon status:"
                ./gradlew --status || true
                echo "🔍 System load:"
                uptime || true
                
                exit 1
              fi
            done
            
            wait $gradle_pid
            echo "✅ Build completed in ${elapsed}min"
          }
          
          build_with_watchdog ":app:assembleDebug"
          build_with_watchdog ":app:assembleRelease"

      - name: Print artifact sizes
        run: |
          ls -lh android/app/build/outputs/apk/debug/*.apk  || true
          ls -lh android/app/build/outputs/apk/release/*.apk || true

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: android/app/build/outputs/apk/debug/*.apk
          retention-days: 14

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: android/app/build/outputs/apk/release/*.apk
          retention-days: 14

      - name: Extract SDK + sizes from manifest/APKs
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          export ANDROID_SDK_ROOT="${ANDROID_SDK_ROOT:-${ANDROID_HOME:-}}"
          echo "${ANDROID_SDK_ROOT}/build-tools/31.0.0" >> "$GITHUB_PATH"
          echo "${ANDROID_SDK_ROOT}/platform-tools" >> "$GITHUB_PATH"

          APK_DEBUG="$(ls -1 android/app/build/outputs/apk/debug/*.apk | head -n1)"
          APK_RELEASE="$(ls -1 android/app/build/outputs/apk/release/*.apk | head -n1)"

          # Use aapt2 if available, else aapt
          AAPT="$(command -v aapt2 || true)"
          [ -z "$AAPT" ] && AAPT="$(command -v aapt || true)"

          # Fallback to apkanalyzer if needed
          if [ -n "$AAPT" ]; then
            MIN_SDK="$($AAPT dump badging "$APK_DEBUG" | sed -n "s/.*sdkVersion:'\([^']*\)'.*/\1/p" | head -n1)"
            TGT_SDK="$($AAPT dump badging "$APK_DEBUG" | sed -n "s/.*targetSdkVersion:'\([^']*\)'.*/\1/p" | head -n1)"
          else
            MIN_SDK="$(apkanalyzer manifest min-sdk "$APK_DEBUG" || true)"
            TGT_SDK="$(apkanalyzer manifest target-sdk "$APK_DEBUG" || true)"
          fi

          DBG_MB="$(( $(stat -c%s "$APK_DEBUG" 2>/dev/null || stat -f%z "$APK_DEBUG") / 1024 / 1024 ))"
          REL_MB="$(( $(stat -c%s "$APK_RELEASE" 2>/dev/null || stat -f%z "$APK_RELEASE") / 1024 / 1024 ))"

          echo "SDK_MIN=$MIN_SDK" >> $GITHUB_ENV
          echo "SDK_TARGET=$TGT_SDK" >> $GITHUB_ENV
          echo "APK_DEBUG_MB=$DBG_MB" >> $GITHUB_ENV
          echo "APK_RELEASE_MB=$REL_MB" >> $GITHUB_ENV

      - name: Ensure build-tools for apksigner/aapt
        shell: bash
        run: |
          set -euo pipefail
          export ANDROID_SDK_ROOT="${ANDROID_SDK_ROOT:-${ANDROID_HOME:-}}"
          if [ -z "${ANDROID_SDK_ROOT}" ] || [ ! -d "${ANDROID_SDK_ROOT}" ]; then
            echo "❌ ANDROID_SDK_ROOT not set or invalid"; exit 1
          fi

          # Use the build-tools version already installed
          echo "${ANDROID_SDK_ROOT}/build-tools/${{ env.ANDROID_BUILD_TOOLS }}" >> "$GITHUB_PATH"

          "${ANDROID_SDK_ROOT}/build-tools/${{ env.ANDROID_BUILD_TOOLS }}/apksigner" version

      - name: Gather APK metadata (debug + release)
        id: apkmeta
        shell: bash
        run: |
          mkdir -p artifacts/meta
          DBG=$(ls android/app/build/outputs/apk/debug/*.apk | head -n1)
          REL=$(ls android/app/build/outputs/apk/release/*.apk | head -n1 || true)

          # Prefer aapt, fallback apkanalyzer
          meta() {
            local APK="$1" ; local OUT="$2"
            if [ -z "$APK" ] || [ ! -f "$APK" ]; then return 0; fi
            if command -v aapt >/dev/null 2>&1; then
              {
                echo "APK=$APK"
                aapt dump badging "$APK"
              } > "$OUT" || true
            elif command -v apkanalyzer >/dev/null 2>&1; then
              {
                echo "APK=$APK"
                apkanalyzer manifest print "$APK"
              } > "$OUT" || true
            fi
          }

          meta "$DBG" artifacts/meta/debug_badging.txt
          meta "$REL" artifacts/meta/release_badging.txt

          # Write outputs for later steps
          echo "debug_apk=$DBG" >> $GITHUB_OUTPUT
          echo "release_apk=$REL" >> $GITHUB_OUTPUT

      - name: Verify Release APK signing
        if: ${{ steps.apkmeta.outputs.release_apk != '' }}
        shell: bash
        run: |
          apksigner verify --print-certs "${{ steps.apkmeta.outputs.release_apk }}"

      - name: APK size guard
        shell: bash
        run: |
          DBG=${{ steps.apkmeta.outputs.debug_apk }}
          REL=${{ steps.apkmeta.outputs.release_apk }}
          mkdir -p artifacts/meta
          summary="$GITHUB_STEP_SUMMARY"

          sz() { [ -f "$1" ] && stat -c%s "$1" || echo 0; }
          DBG_SIZE=$(sz "$DBG")
          REL_SIZE=$(sz "$REL")

          # Thresholds (adjustable)
          DBG_MAX=$((120 * 1024 * 1024))   # 120 MB
          REL_MAX=$((80 * 1024 * 1024))    # 80 MB

          echo "## APK Size" >> "$summary"
          echo "- Debug: $((DBG_SIZE/1024/1024)) MB" >> "$summary"
          if [ -f "$REL" ]; then
            echo "- Release: $((REL_SIZE/1024/1024)) MB" >> "$summary"
          fi

          WARN=0
          if [ "$DBG_SIZE" -gt "$DBG_MAX" ]; then echo "⚠️ Debug APK exceeds ${DBG_MAX} bytes" >> "$summary"; WARN=1; fi
          if [ -f "$REL" ] && [ "$REL_SIZE" -gt "$REL_MAX" ]; then echo "⚠️ Release APK exceeds ${REL_MAX} bytes" >> "$summary"; WARN=1; fi

          # Do not fail build; just warn (flip to hard fail later if desired)
          exit 0

      - name: SDK sanity (min/target)
        shell: bash
        run: |
          summary="$GITHUB_STEP_SUMMARY"
          FILE="artifacts/meta/debug_badging.txt"
          if [ -f "$FILE" ]; then
            MIN=$(grep -Eo "sdkVersion:'.*'|uses-sdk:minSdkVersion:'[0-9]+'" "$FILE" | head -n1 | sed "s/.*'//;s/'//")
            TGT=$(grep -Eo "targetSdkVersion:'[0-9]+'" "$FILE" | head -n1 | sed "s/.*'//;s/'//")
            echo "## SDK" >> "$summary"
            echo "- minSdk: \`${MIN:-unknown}\`" >> "$summary"
            echo "- targetSdk: \`${TGT:-unknown}\`" >> "$summary"
          fi

      - name: Upload metadata artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-metadata
          path: artifacts/meta/**
          retention-days: 14

      - name: Publish run identifiers
        if: always()
        shell: bash
        run: |
          echo "${GITHUB_RUN_ID}" > RUN_ID.txt
          echo "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" > RUN_URL.txt

      - name: Upload run identifiers
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ids
          path: |
            RUN_ID.txt
            RUN_URL.txt

  smoke-test:
    name: Android Smoke Test (Ubuntu)
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true
    env:
      NODE_OPTIONS: --openssl-legacy-provider
      ADB_INSTALL_TIMEOUT: 20
      ANDROID_SERIAL: emulator-5554
    steps:
      - uses: actions/checkout@v4

      - name: Setup Android SDK environment
        run: |
          echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          echo "ANDROID_HOME=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          echo "/usr/local/lib/android/sdk/platform-tools" >> $GITHUB_PATH
          echo "/usr/local/lib/android/sdk/emulator" >> $GITHUB_PATH
          echo "/usr/local/lib/android/sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH

      - name: Install system image for emulator
        run: |
          set -euo pipefail
          # Accept licenses first
          yes | sdkmanager --licenses || true
          # Install only the system image we need (API 30)
          sdkmanager --install "system-images;android-30;default;x86_64"

      - name: Download Debug APK
        uses: actions/download-artifact@v4
        with:
          name: app-debug-apk
          path: artifacts/debug

      - name: Download Release APK
        uses: actions/download-artifact@v4
        with:
          name: app-release-apk
          path: artifacts/release

      - name: Create AVD (API 30 default x86_64)
        shell: bash
        run: |
          set -euo pipefail
          echo "no" | avdmanager create avd -n ci_api_30 -k "system-images;android-30;default;x86_64" --device "pixel_5"

      - name: Boot emulator (accel off, pinned serial + watchdog)
        shell: bash
        env:
          ANDROID_SERIAL: emulator-5554
        run: |
          set -euo pipefail
          mkdir -p artifacts/smoke-logs artifacts/ids artifacts/summary
          adb kill-server || true
          emulator -avd ci_api_30 -port 5554 \
            -no-snapshot -no-snapshot-save -no-window -no-audio -no-boot-anim \
            -gpu swiftshader_indirect -camera-back none -netfast -no-metrics \
            -accel off -wipe-data -qemu -m 1024 \
            -verbose > artifacts/smoke-logs/emulator.txt 2>&1 &
          EMU_PID=$!

          boot_deadline=$((SECONDS+300))
          ( sleep 300; echo "[WATCHDOG] Ubuntu emulator boot exceeded 300s; adb devices:"; adb devices -l || true; kill -9 $EMU_PID || true; echo "BOOT_FAILED=1" >> $GITHUB_ENV; ) &
          BOOT_WD=$!

          adb start-server
          adb -s "$ANDROID_SERIAL" wait-for-device || true
          while [ $SECONDS -lt $boot_deadline ]; do
            st=$(adb -s "$ANDROID_SERIAL" get-state 2>/dev/null | tr -d '\r')
            booted=$(adb -s "$ANDROID_SERIAL" shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
            [ "$st" = "device" ] && [ "$booted" = "1" ] && break
            sleep 5
          done

          if [ "${booted:-0}" != "1" ]; then
            echo "boot_ok=false" > artifacts/summary/summary.env
            echo "BOOT_FAILED=1" >> $GITHUB_ENV
          else
            echo "boot_ok=true" > artifacts/summary/summary.env
            echo "BOOT_FAILED=0" >> $GITHUB_ENV
            kill $BOOT_WD || true
            adb -s "$ANDROID_SERIAL" shell settings put global window_animation_scale 0 || true
            adb -s "$ANDROID_SERIAL" shell settings put global transition_animation_scale 0 || true
            adb -s "$ANDROID_SERIAL" shell settings put global animator_duration_scale 0 || true
          fi
      
      - name: Discover APP_ID from debug APK
        if: env.BOOT_FAILED == '0'
        shell: bash
        run: |
          set -euo pipefail
          # Use first available build-tools version for aapt
          BUILD_TOOLS_DIR="$ANDROID_SDK_ROOT/build-tools"
          if [ -d "$BUILD_TOOLS_DIR" ]; then
            AAPT="$(find "$BUILD_TOOLS_DIR" -name "aapt" -type f | head -n1)"
          fi
          
          APK_DEBUG="$(find artifacts/debug -type f -name '*debug*.apk' | head -n1)"
          if [ -z "${APK_DEBUG:-}" ]; then echo "Debug APK not found"; exit 1; fi
          
          if [ -n "${AAPT:-}" ] && [ -x "$AAPT" ]; then
            APP_ID=$("$AAPT" dump badging "$APK_DEBUG" | awk -F"'" '/package: name=/{print $2; exit}')
          elif command -v apkanalyzer >/dev/null 2>&1; then
            APP_ID=$(apkanalyzer manifest application-id "$APK_DEBUG")
          else
            echo "Warning: No tool available to extract package ID, using fallback"
            APP_ID="com.app.uprise.debug"
          fi
          
          echo "APP_ID=$APP_ID" | tee -a "$GITHUB_ENV"
          echo "Detected APP_ID=$APP_ID"

      - name: Clean conflicting packages (guaranteed clean install)
        if: env.BOOT_FAILED == '0'
        shell: bash
        run: |
          set -euo pipefail
          base="${APP_ID%.debug}"
          echo "🧹 Ensuring clean install by removing any existing packages..."
          echo "Target APP_ID: $APP_ID"
          echo "Base package: $base"
          
          # Always uninstall debug package (current APP_ID)
          if adb -s "$ANDROID_SERIAL" uninstall "$APP_ID" 2>/dev/null; then
            echo "✅ Removed existing debug package: $APP_ID"
          else
            echo "ℹ️ Debug package not installed: $APP_ID"
          fi
          
          # Always uninstall base package if different from current APP_ID
          if [ "$base" != "$APP_ID" ]; then
            if adb -s "$ANDROID_SERIAL" uninstall "$base" 2>/dev/null; then
              echo "✅ Removed existing base package: $base"
            else
              echo "ℹ️ Base package not installed: $base"
            fi
          fi
          
          echo "✨ Clean install environment ready"

      - name: Install & Launch (3 attempts, minimal smoke)
        if: env.BOOT_FAILED == '0'
        shell: bash
        run: |
          set -euo pipefail
          APK_DEBUG="$(find artifacts/debug -type f -name '*debug*.apk' | head -n1)"
          for i in 1 2 3; do
            if adb -s "$ANDROID_SERIAL" install -r "$APK_DEBUG"; then break; fi
            adb -s "$ANDROID_SERIAL" shell pm clear "$APP_ID" || true
            sleep 2
          done
          adb -s "$ANDROID_SERIAL" shell am start -n "$APP_ID/.MainActivity"
          
          adb -s "$ANDROID_SERIAL" logcat -c || true
          adb -s "$ANDROID_SERIAL" logcat -v time > artifacts/smoke-logs/logcat.txt 2>&1 &
          LOG_PID=$!

          start_ts=$SECONDS; deadline=$((SECONDS+90)); ttjs_s=""
          while [ $SECONDS -lt $deadline ]; do
            if grep -q "ReactNativeJS: Running" artifacts/smoke-logs/logcat.txt; then
              ttjs_s=$((SECONDS-start_ts)); break
            fi
            sleep 1
          done
          kill $LOG_PID || true
          echo "ttjs_s=${ttjs_s:-}" >> artifacts/summary/summary.env

      - name: Write summary.json
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts/summary
          run_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          boot="${booted:-false}"
          app_id="${APP_ID:-unknown}"
          printf '{ "run_id": %s, "run_url": "%s", "boot_ok": %s, "install_ok": true, "ttjs_s": null, "app_id": "%s" }\n' \
            "${{ github.run_id }}" "$run_url" "$boot" "$app_id" \
            > artifacts/summary/summary.json

      - name: CI Agent Dispatch Hook
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          
          # Determine CI outcome
          if [ "${{ job.status }}" = "success" ]; then
            OUTCOME="success"
            AGENTS="performance-engineer,documentation-engineer"
          else
            OUTCOME="failure"  
            AGENTS="error-detective,build-engineer"
          fi
          
          # Generate run URL
          run_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Convert comma-separated agents to JSON array
          AGENTS_JSON=$(echo "$AGENTS" | jq -R 'split(",")' 2>/dev/null || echo '["error-detective","build-engineer"]')
          
          # Generate dispatch context with proper JSON
          mkdir -p artifacts/summary
          cat > artifacts/summary/dispatch.json << 'EOF'
          {
            "hook_type": "ci_OUTCOME_PLACEHOLDER",
            "agents": AGENTS_JSON_PLACEHOLDER,
            "context": {
              "run_id": "${{ github.run_id }}",
              "run_url": "RUN_URL_PLACEHOLDER",
              "branch": "${{ github.head_ref || github.ref_name }}",
              "job": "ubuntu-smoke",
              "outcome": "OUTCOME_PLACEHOLDER",
              "platform": "ubuntu-latest"
            },
            "timestamp": "TIMESTAMP_PLACEHOLDER"
          }
          EOF
          
          # Substitute variables in JSON file
          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          sed -i "s/OUTCOME_PLACEHOLDER/$OUTCOME/g" artifacts/summary/dispatch.json
          sed -i "s|AGENTS_JSON_PLACEHOLDER|$AGENTS_JSON|g" artifacts/summary/dispatch.json
          sed -i "s|RUN_URL_PLACEHOLDER|$run_url|g" artifacts/summary/dispatch.json
          sed -i "s/TIMESTAMP_PLACEHOLDER/$TIMESTAMP/g" artifacts/summary/dispatch.json
          
          # Post PR comment with agent dispatch (if PR context)
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            if [ "$OUTCOME" = "failure" ]; then
              cat > artifacts/summary/pr-comment.md << 'EOF'
          🔴 **CI Failed** - Ubuntu Smoke Test
          
          **Dispatching Investigation Team:**
          - `error-detective` - Analyzing failure patterns and root cause
          - `build-engineer` - Investigating build system issues
          
          **Run Details:** [${{ github.run_id }}](RUN_URL_PLACEHOLDER)
          **Platform:** Ubuntu Latest
          **Branch:** ${{ github.head_ref || github.ref_name }}
          
          Agents will provide detailed analysis and remediation steps.
          EOF
            else
              cat > artifacts/summary/pr-comment.md << 'EOF'
          ✅ **CI Passed** - Ubuntu Smoke Test
          
          **Dispatching Optimization Team:**
          - `performance-engineer` - Analyzing APK performance metrics
          - `documentation-engineer` - Updating project documentation
          
          **Run Details:** [${{ github.run_id }}](RUN_URL_PLACEHOLDER)
          **Platform:** Ubuntu Latest
          
          Agents will provide performance insights and documentation updates.
          EOF
            fi
            
            # Substitute variables in PR comment
            sed -i "s|RUN_URL_PLACEHOLDER|$run_url|g" artifacts/summary/pr-comment.md
          fi
          
      - name: Validate Agent Dispatch JSON
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          
          # Validate generated JSON
          if [ -f "artifacts/summary/dispatch.json" ]; then
            echo "🔍 Validating dispatch JSON..."
            if jq empty artifacts/summary/dispatch.json 2>/dev/null; then
              echo "✅ Valid JSON generated"
              echo "Generated dispatch context:"
              cat artifacts/summary/dispatch.json | jq .
            else
              echo "❌ Invalid JSON detected"
              echo "Raw content:"
              cat artifacts/summary/dispatch.json
              exit 1
            fi
          else
            echo "⚠️ No dispatch JSON file found"
          fi
          
      - name: Debug Agent Dispatch Context
        if: always()
        shell: bash
        run: |
          echo "=== CI Agent Dispatch Debug ==="
          echo "Job Status: ${{ job.status }}"
          echo "Event Name: ${{ github.event_name }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Branch: ${{ github.head_ref || github.ref_name }}"
          echo "Platform: ubuntu-latest"
          echo "Environment Variables:"
          env | grep -E "^(OUTCOME|AGENTS|APP_ID|BOOT_FAILED)" || echo "No dispatch vars found"
      - uses: actions/upload-artifact@v4
        with: { name: smoke-logs, path: artifacts/smoke-logs/ }
      - uses: actions/upload-artifact@v4
        with: { name: ids, path: artifacts/ids/ }
      - uses: actions/upload-artifact@v4
        if: always()
        with: { name: summary, path: artifacts/summary/summary.json }
      - uses: actions/upload-artifact@v4
        if: always()
        with: { name: agent-dispatch, path: artifacts/summary/dispatch.json }

  smoke-macos-hvf:
    name: macOS HVF Smoke (Optional)
    needs: build
    runs-on: macos-13
    continue-on-error: true
    timeout-minutes: 15
    env:
      NODE_OPTIONS: --openssl-legacy-provider
      ADB_INSTALL_TIMEOUT: 20
      ANDROID_SERIAL: emulator-5554
    steps:
      - uses: actions/checkout@v4

      - name: Setup Android SDK environment
        run: |
          echo "ANDROID_SDK_ROOT=$HOME/Library/Android/sdk" >> $GITHUB_ENV
          echo "ANDROID_HOME=$HOME/Library/Android/sdk" >> $GITHUB_ENV
          echo "$HOME/Library/Android/sdk/platform-tools" >> $GITHUB_PATH
          echo "$HOME/Library/Android/sdk/emulator" >> $GITHUB_PATH
          echo "$HOME/Library/Android/sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH

      - name: Install system image for emulator
        run: |
          set -euo pipefail
          # Accept licenses first
          yes | sdkmanager --licenses || true
          # Install only the system image we need (API 30)
          sdkmanager --install "system-images;android-30;default;x86_64"

      - name: Download Debug APK
        uses: actions/download-artifact@v4
        with:
          name: app-debug-apk
          path: artifacts/debug

      - name: Download Release APK
        uses: actions/download-artifact@v4
        with:
          name: app-release-apk
          path: artifacts/release

      - name: Create AVD (API 30 default x86_64)
        shell: bash
        run: |
          set -euo pipefail
          echo "no" | avdmanager create avd -n ci_api_30 -k "system-images;android-30;default;x86_64" --device "pixel_5"

      - name: Boot emulator (HVF accel, pinned serial + watchdog)
        shell: bash
        env:
          ANDROID_SERIAL: emulator-5554
        run: |
          set -euo pipefail
          mkdir -p artifacts/smoke-logs artifacts/ids artifacts/summary
          adb kill-server || true
          emulator -avd ci_api_30 -port 5554 \
            -no-snapshot -no-snapshot-save -no-window -no-audio -no-boot-anim \
            -gpu swiftshader_indirect -camera-back none -netfast -no-metrics \
            -accel on -wipe-data -qemu -m 2048 \
            -verbose > artifacts/smoke-logs/emulator.txt 2>&1 &
          EMU_PID=$!
          echo "EMU_PID=$EMU_PID" >> $GITHUB_ENV

          boot_deadline=$((SECONDS+480))
          ( sleep 720; echo "[WATCHDOG] macOS emulator boot exceeded 720s; adb devices:"; adb devices -l || true; kill -9 $EMU_PID || true; echo "BOOT_FAILED=1" >> $GITHUB_ENV; ) &
          BOOT_WD=$!

          adb start-server
          adb -s "$ANDROID_SERIAL" wait-for-device || true
          while [ $SECONDS -lt $boot_deadline ]; do
            st=$(adb -s "$ANDROID_SERIAL" get-state 2>/dev/null | tr -d '\r')
            booted=$(adb -s "$ANDROID_SERIAL" shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
            [ "$st" = "device" ] && [ "$booted" = "1" ] && break
            sleep 5
          done

          if [ "${booted:-0}" != "1" ]; then
            echo "boot_ok=false" > artifacts/summary/summary.env
            echo "BOOT_FAILED=1" >> $GITHUB_ENV
          else
            echo "boot_ok=true" > artifacts/summary/summary.env
            echo "BOOT_FAILED=0" >> $GITHUB_ENV
            kill $BOOT_WD || true
            adb -s "$ANDROID_SERIAL" shell settings put global window_animation_scale 0 || true
            adb -s "$ANDROID_SERIAL" shell settings put global transition_animation_scale 0 || true
            adb -s "$ANDROID_SERIAL" shell settings put global animator_duration_scale 0 || true
          fi
      
      - name: Discover APP_ID from debug APK
        if: env.BOOT_FAILED == '0'
        shell: bash
        run: |
          set -euo pipefail
          # Use first available build-tools version for aapt
          BUILD_TOOLS_DIR="$ANDROID_SDK_ROOT/build-tools"
          if [ -d "$BUILD_TOOLS_DIR" ]; then
            AAPT="$(find "$BUILD_TOOLS_DIR" -name "aapt" -type f | head -n1)"
          fi
          
          APK_DEBUG="$(find artifacts/debug -type f -name '*debug*.apk' | head -n1)"
          if [ -z "${APK_DEBUG:-}" ]; then echo "Debug APK not found"; exit 1; fi
          
          if [ -n "${AAPT:-}" ] && [ -x "$AAPT" ]; then
            APP_ID=$("$AAPT" dump badging "$APK_DEBUG" | awk -F"'" '/package: name=/{print $2; exit}')
          elif command -v apkanalyzer >/dev/null 2>&1; then
            APP_ID=$(apkanalyzer manifest application-id "$APK_DEBUG")
          else
            echo "Warning: No tool available to extract package ID, using fallback"
            APP_ID="com.app.uprise.debug"
          fi
          
          echo "APP_ID=$APP_ID" | tee -a "$GITHUB_ENV"
          echo "Detected APP_ID=$APP_ID"

      - name: Clean conflicting packages (guaranteed clean install)
        if: env.BOOT_FAILED == '0'
        shell: bash
        run: |
          set -euo pipefail
          base="${APP_ID%.debug}"
          echo "🧹 Ensuring clean install by removing any existing packages..."
          echo "Target APP_ID: $APP_ID"
          echo "Base package: $base"
          
          # Always uninstall debug package (current APP_ID)
          if adb -s "$ANDROID_SERIAL" uninstall "$APP_ID" 2>/dev/null; then
            echo "✅ Removed existing debug package: $APP_ID"
          else
            echo "ℹ️ Debug package not installed: $APP_ID"
          fi
          
          # Always uninstall base package if different from current APP_ID
          if [ "$base" != "$APP_ID" ]; then
            if adb -s "$ANDROID_SERIAL" uninstall "$base" 2>/dev/null; then
              echo "✅ Removed existing base package: $base"
            else
              echo "ℹ️ Base package not installed: $base"
            fi
          fi
          
          echo "✨ Clean install environment ready"

      - name: Install & Launch (3 attempts, minimal smoke)
        if: env.BOOT_FAILED == '0'
        shell: bash
        run: |
          set -euo pipefail
          APK_DEBUG="$(find artifacts/debug -type f -name '*debug*.apk' | head -n1)"
          for i in 1 2 3; do
            if adb -s "$ANDROID_SERIAL" install -r "$APK_DEBUG"; then break; fi
            adb -s "$ANDROID_SERIAL" shell pm clear "$APP_ID" || true
            sleep 2
          done
          adb -s "$ANDROID_SERIAL" shell am start -n "$APP_ID/.MainActivity"

      - name: Write summary.json
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts/summary
          run_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          boot="${booted:-false}"
          app_id="${APP_ID:-unknown}"
          printf '{ "run_id": %s, "run_url": "%s", "boot_ok": %s, "install_ok": true, "ttjs_s": null, "app_id": "%s", "platform": "macos-hvf" }\n' \
            "${{ github.run_id }}" "$run_url" "$boot" "$app_id" \
            > artifacts/summary/summary.json

      - name: CI Agent Dispatch Hook
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          
          # Determine CI outcome (macOS HVF is optional, so check continue-on-error behavior)
          if [ "${{ job.status }}" = "success" ]; then
            OUTCOME="success"
            AGENTS="performance-engineer,documentation-engineer"
          else
            OUTCOME="failure"  
            AGENTS="error-detective,build-engineer"
          fi
          
          # Generate run URL
          run_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Convert comma-separated agents to JSON array
          AGENTS_JSON=$(echo "$AGENTS" | jq -R 'split(",")' 2>/dev/null || echo '["error-detective","build-engineer"]')
          
          # Generate dispatch context with proper JSON
          mkdir -p artifacts/summary
          cat > artifacts/summary/dispatch.json << 'EOF'
          {
            "hook_type": "ci_OUTCOME_PLACEHOLDER",
            "agents": AGENTS_JSON_PLACEHOLDER,
            "context": {
              "run_id": "${{ github.run_id }}",
              "run_url": "RUN_URL_PLACEHOLDER",
              "branch": "${{ github.head_ref || github.ref_name }}",
              "job": "macos-hvf-smoke",
              "outcome": "OUTCOME_PLACEHOLDER",
              "platform": "macos-13-hvf",
              "optional": true
            },
            "timestamp": "TIMESTAMP_PLACEHOLDER"
          }
          EOF
          
          # Substitute variables in JSON file
          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          sed -i "s/OUTCOME_PLACEHOLDER/$OUTCOME/g" artifacts/summary/dispatch.json
          sed -i "s|AGENTS_JSON_PLACEHOLDER|$AGENTS_JSON|g" artifacts/summary/dispatch.json
          sed -i "s|RUN_URL_PLACEHOLDER|$run_url|g" artifacts/summary/dispatch.json
          sed -i "s/TIMESTAMP_PLACEHOLDER/$TIMESTAMP/g" artifacts/summary/dispatch.json
          
          # Post PR comment with agent dispatch (if PR context)
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            if [ "$OUTCOME" = "failure" ]; then
              cat > artifacts/summary/pr-comment-macos.md << 'EOF'
          🔴 **CI Failed** - macOS HVF Smoke Test
          
          **Dispatching Investigation Team:**
          - `error-detective` - Analyzing failure patterns and root cause
          - `build-engineer` - Investigating build system issues
          
          **Run Details:** [${{ github.run_id }}](RUN_URL_PLACEHOLDER)
          **Platform:** macOS 13 with HVF acceleration
          **Branch:** ${{ github.head_ref || github.ref_name }}
          
          Agents will provide detailed analysis and remediation steps.
          EOF
            else
              cat > artifacts/summary/pr-comment-macos.md << 'EOF'
          ✅ **CI Passed** - macOS HVF Smoke Test
          
          **Dispatching Optimization Team:**
          - `performance-engineer` - Analyzing APK performance metrics
          - `documentation-engineer` - Updating project documentation
          
          **Run Details:** [${{ github.run_id }}](RUN_URL_PLACEHOLDER)
          **Platform:** macOS 13 with HVF acceleration
          
          Agents will provide performance insights and documentation updates.
          EOF
            fi
            
            # Substitute variables in PR comment
            sed -i "s|RUN_URL_PLACEHOLDER|$run_url|g" artifacts/summary/pr-comment-macos.md
          fi
          
      - name: Validate Agent Dispatch JSON (macOS)
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          
          # Validate generated JSON
          if [ -f "artifacts/summary/dispatch.json" ]; then
            echo "🔍 Validating macOS dispatch JSON..."
            if jq empty artifacts/summary/dispatch.json 2>/dev/null; then
              echo "✅ Valid JSON generated"
              echo "Generated dispatch context:"
              cat artifacts/summary/dispatch.json | jq .
            else
              echo "❌ Invalid JSON detected"
              echo "Raw content:"
              cat artifacts/summary/dispatch.json
              exit 1
            fi
          else
            echo "⚠️ No dispatch JSON file found"
          fi
          
      - name: Debug Agent Dispatch Context (macOS)
        if: always()
        shell: bash
        run: |
          echo "=== macOS CI Agent Dispatch Debug ==="
          echo "Job Status: ${{ job.status }}"
          echo "Event Name: ${{ github.event_name }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Branch: ${{ github.head_ref || github.ref_name }}"
          echo "Platform: macos-13-hvf"
          echo "Environment Variables:"
          env | grep -E "^(OUTCOME|AGENTS|APP_ID|BOOT_FAILED|EMU_PID)" || echo "No dispatch vars found"
      
      - name: Teardown emulator
        if: always()
        shell: bash
        run: |
          if [ -n "${EMU_PID:-}" ] && kill -0 $EMU_PID 2>/dev/null; then
            echo "Terminating emulator (PID: $EMU_PID)..."
            kill -TERM $EMU_PID 2>/dev/null || true
            sleep 2
            kill -9 $EMU_PID 2>/dev/null || true
          fi
      
      - uses: actions/upload-artifact@v4
        if: always()
        with: { name: smoke-logs-macos, path: artifacts/smoke-logs/ }
      - uses: actions/upload-artifact@v4
        if: always()
        with: { name: ids-macos, path: artifacts/ids/ }
      - uses: actions/upload-artifact@v4
        if: always()
        with: { name: summary-macos, path: artifacts/summary/summary.json }
      - uses: actions/upload-artifact@v4
        if: always()
        with: { name: agent-dispatch-macos, path: artifacts/summary/dispatch.json }


