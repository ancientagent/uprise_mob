name: Android Build & Smoke Test

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop
      - feat/ccpm-framework
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    name: Build APKs
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17 (for Android SDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Prepare Android SDK (isolated, AGP 7.0.x safe)
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
        run: |
          set -e

          # Isolate SDK so AGP doesn't see newer "33x/34x/..." tool labels
          rm -rf "$ANDROID_SDK_ROOT"
          mkdir -p "$ANDROID_SDK_ROOT"

          echo "sdk.dir=$ANDROID_SDK_ROOT" > ./android/local.properties

          # Pin an older cmdline-tools revision compatible with AGP 7.0.x
          # (8512546 is known-good; avoid latest which emits newer repo XML/labels)
          CT_REV=8512546
          curl -sSL "https://dl.google.com/android/repository/commandlinetools-linux-${CT_REV}_latest.zip" -o cmdtools.zip
          unzip -q cmdtools.zip -d "$ANDROID_SDK_ROOT"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/bin" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true
          mv "$ANDROID_SDK_ROOT/cmdline-tools/lib" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true
          mv "$ANDROID_SDK_ROOT/cmdline-tools/source.properties" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true
          mv "$ANDROID_SDK_ROOT/cmdline-tools/NOTICE.txt" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true

          # Accept licenses non-interactively
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" --licenses >/dev/null

          # Install ONLY what AGP 7.0.4 needs
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" \
            "platforms;android-31" \
            "build-tools;31.0.0"

          echo "=== Installed build-tools ==="
          ls -1 "$ANDROID_SDK_ROOT/build-tools" || true

          # Guard: fail if anything other than 31.0.0 is present
          BT_COUNT=$(ls -1 "$ANDROID_SDK_ROOT/build-tools" | wc -l | tr -d ' ')
          if [ "$BT_COUNT" != "1" ] || [ ! -d "$ANDROID_SDK_ROOT/build-tools/31.0.0" ]; then
            echo "Unexpected build-tools present. Found:"
            ls -1 "$ANDROID_SDK_ROOT/build-tools" || true
            exit 1
          fi

      - name: Print versions
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
        run: |
          echo "JAVA:" && java -version
          echo "Gradle wrapper:" && ./android/gradlew -v
          echo "SDK Root: $ANDROID_SDK_ROOT"
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" --list | head -n 20 || true

      - name: Switch to JDK 11 (for Gradle)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Node dependencies
        run: npm install --legacy-peer-deps

      - name: Make Gradle wrapper executable
        run: chmod +x ./android/gradlew

      - name: Build Debug and Release APKs
        working-directory: android
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
          NODE_OPTIONS: --openssl-legacy-provider
        run: |
          export JAVA_TOOL_OPTIONS=""
          ./gradlew :app:clean :app:assembleDebug :app:assembleRelease --no-daemon --stacktrace
        timeout-minutes: 20

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: android/app/build/outputs/apk/debug/*.apk
          retention-days: 7

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: android/app/build/outputs/apk/release/*.apk
          retention-days: 7

  smoke-test:
    name: Smoke Test (API 31)
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Debug APK
        uses: actions/download-artifact@v4
        with:
          name: app-debug-apk
          path: ./apk

      - name: Setup JDK 17 (for Android SDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Prepare Android SDK for emulator (isolated, AGP 7.0.x safe)
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
        run: |
          set -e

          # Isolate SDK so AGP doesn't see newer "33x/34x/..." tool labels
          rm -rf "$ANDROID_SDK_ROOT"
          mkdir -p "$ANDROID_SDK_ROOT"

          # Pin an older cmdline-tools revision compatible with AGP 7.0.x
          CT_REV=8512546
          curl -sSL "https://dl.google.com/android/repository/commandlinetools-linux-${CT_REV}_latest.zip" -o cmdtools.zip
          unzip -q cmdtools.zip -d "$ANDROID_SDK_ROOT"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/bin" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true
          mv "$ANDROID_SDK_ROOT/cmdline-tools/lib" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true
          mv "$ANDROID_SDK_ROOT/cmdline-tools/source.properties" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true
          mv "$ANDROID_SDK_ROOT/cmdline-tools/NOTICE.txt" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true

          # Accept licenses non-interactively
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" --licenses >/dev/null

          # Install emulator requirements + ONLY build-tools 31.0.0
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" \
            "platforms;android-31" \
            "build-tools;31.0.0" \
            "emulator" \
            "system-images;android-31;google_apis;x86_64"

      - name: Run smoke test on emulator
        uses: reactivecircus/android-emulator-runner@v2
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
        with:
          api-level: 31
          target: google_apis
          arch: x86_64
          avd-name: test-emulator
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
          disable-animations: true
          script: |
            # Wait for boot completion
            echo "Waiting for device boot..."
            adb wait-for-device
            timeout 120 bash -c 'while [[ "$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')" != "1" ]]; do sleep 2; echo "Boot status: $(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')"; done'
            echo "sys.boot_completed=1"
            
            # Install APK
            echo "Installing APK..."
            APK_PATH=$(find ./apk -name "*.apk" | head -1)
            if [ -z "$APK_PATH" ]; then
              echo "ERROR: No APK found in ./apk directory"
              exit 1
            fi
            echo "Found APK: $APK_PATH"
            adb install -r "$APK_PATH"
            echo "Install ... Success"
            
            # Detect and launch app (com.app.uprise is the detected app ID)
            APP_ID="com.app.uprise"
            echo "Launching app: $APP_ID"
            
            # Try direct launch first
            if adb shell am start -n "$APP_ID/.MainActivity" 2>&1 | tee launch.log | grep -E "(Starting:|Error:)"; then
              if grep -q "Error:" launch.log; then
                echo "Direct launch failed, trying monkey..."
                adb shell monkey -p "$APP_ID" -c android.intent.category.LAUNCHER 1
              fi
            fi
            
            # Wait for app to stabilize
            sleep 5
            
            # Capture diagnostics
            echo "=== Package Info ==="
            adb shell pm list packages | grep -i uprise || echo "No uprise packages found"
            
            echo "=== Running Activities ==="
            adb shell dumpsys activity activities | grep -E "(mFocusedActivity|mResumedActivity)" | head -5
            
            echo "=== Logcat (last 40 lines) ==="
            adb logcat -d | tail -40
            
      - name: Save smoke test logs
        if: always()
        run: |
          adb logcat -d > logcat.txt || true
          adb shell dumpsys > dumpsys.txt || true
          adb shell getprop > props.txt || true
        continue-on-error: true
        
      - name: Upload smoke-logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-logs
          path: |
            launch.log
            logcat.txt
          retention-days: 3
          
      - name: Upload smoke-diags
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-diags
          path: |
            dumpsys.txt
            props.txt
          retention-days: 3

      - name: Upload ids
        if: always()
        run: |
          echo "${{ github.run_id }}" > RUN_ID.txt
          echo "${{ github.job }}" > JOB_ID.txt
        
      - name: Upload IDs artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ids
          path: |
            RUN_ID.txt
            JOB_ID.txt
          retention-days: 3

      - name: Report IDs
        if: always()
        run: |
          echo "RUN_ID: ${{ github.run_id }}"
          echo "Smoke JOB_ID: ${{ github.job }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Repository: ${{ github.repository }}"