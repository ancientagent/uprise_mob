name: Android CI

on:
  push:
    branches: [ main, develop, feat/**, fix/** ]
  pull_request:

jobs:
  build:
    name: Build Debug & Release APKs
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'

      - name: Setup JDK 17 for SDK tools
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Switch to JDK 11 for Gradle build
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Cache Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Install deps
        run: |
          corepack enable
          yarn install --frozen-lockfile || yarn install --network-timeout 600000

      - name: Build APKs
        run: |
          cd android
          chmod +x ./gradlew
          ./gradlew :app:assembleDebug :app:assembleRelease --no-daemon --stacktrace

      # Optional: zipalign+apksigner if your pipeline requires CI signing for release
      # (Assumes build-tools 31.0.0 available)
      - name: Prepare artifacts
        run: |
          mkdir -p artifacts/debug artifacts/release
          cp android/app/build/outputs/apk/debug/app-debug.apk artifacts/debug/ || true
          cp android/app/build/outputs/apk/release/app-release.apk artifacts/release/ || true

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: artifacts/debug/app-debug.apk
          if-no-files-found: warn

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: artifacts/release/app-release.apk
          if-no-files-found: warn

  smoke-test:
    name: Android Smoke Test (macOS HVF, API 31)
    runs-on: macos-13
    needs: build
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK 17 for SDK tools
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Download Debug APK
        uses: actions/download-artifact@v4
        with:
          name: app-debug-apk
          path: artifacts/debug

      - name: Download Release APK
        uses: actions/download-artifact@v4
        with:
          name: app-release-apk
          path: artifacts/release

      - name: Create AVD (API 31, google_apis, x86_64 - cold boot)
        shell: bash
        run: |
          yes "y" | sdkmanager --install "system-images;android-31;google_apis;x86_64"
          echo "no" | avdmanager create avd -n ci_api_31 -k "system-images;android-31;google_apis;x86_64" --device "pixel_4"
          # Force cold boot & consistent config
          AVD="$HOME/.android/avd/ci_api_31.avd"
          mkdir -p "$AVD"
          echo "hw.ramSize=2048" >> "$AVD/config.ini"
          echo "disk.dataPartition.size=2G" >> "$AVD/config.ini"
          echo "hw.accelerometer=yes" >> "$AVD/config.ini"

      - name: Boot Emulator (HVF) + ADB hygiene (with retry)
        shell: bash
        run: |
          mkdir -p artifacts/smoke
          adb kill-server || true
          $ANDROID_SDK_ROOT/emulator/emulator -avd ci_api_31 \
            -no-snapshot -no-snapshot-save -no-audio -no-boot-anim -no-window \
            -gpu swiftshader_indirect -accel hvf -feature WindowsPipeTransport=on \
            -skip-adb-auth -camera-back none -camera-front none \
            -qt-hide-window -verbose > artifacts/smoke/emulator.txt 2>&1 &
          EMU_PID=$!

          # Wait for device with extended timeout
          boot_deadline=$((SECONDS+420))
          adb start-server
          adb wait-for-device || true
          while [ $SECONDS -lt $boot_deadline ]; do
            booted=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
            if [ "$booted" = "1" ]; then break; fi
            sleep 5
          done
          
          # Retry once if not booted
          if [ "${booted:-0}" != "1" ]; then
            echo "First boot attempt failed, retrying..."
            adb emu kill || true
            sleep 5
            $ANDROID_SDK_ROOT/emulator/emulator -avd ci_api_31 -no-snapshot -no-snapshot-save -no-audio -no-boot-anim -no-window -gpu swiftshader_indirect -accel hvf -qt-hide-window -verbose > artifacts/smoke/emulator_retry.txt 2>&1 &
            boot_deadline=$((SECONDS+300))
            adb wait-for-device || true
            while [ $SECONDS -lt $boot_deadline ]; do
              booted=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
              if [ "$booted" = "1" ]; then break; fi
              sleep 5
            done
          fi

          # Basic sanity
          adb shell settings put global window_animation_scale 0 || true
          adb shell settings put global transition_animation_scale 0 || true
          adb shell settings put global animator_duration_scale 0 || true

          # Record boot wait seconds
          if [ "$booted" != "1" ]; then
            echo "BOOT_FAILED=1" >> $GITHUB_ENV
          else
            echo "BOOT_FAILED=0" >> $GITHUB_ENV
          fi

      - name: Install APKs
        if: env.BOOT_FAILED == '0'
        shell: bash
        run: |
          set -e
          DEBUG_APK="artifacts/debug/app-debug.apk"
          RELEASE_APK="artifacts/release/app-release.apk"

          adb install -r "$DEBUG_APK"
          # Verify release is installable (no launch)
          if [ -f "$RELEASE_APK" ]; then
            adb install -r "$RELEASE_APK" || true
          fi

      - name: Launch Debug & Capture TTJS
        if: env.BOOT_FAILED == '0'
        shell: bash
        run: |
          set -e
          # Derive applicationId from debug apk using aapt
          # Ensure build-tools are present
          sdkmanager --install "build-tools;31.0.0" >/dev/null
          AAPT="$ANDROID_SDK_ROOT/build-tools/31.0.0/aapt"
          APP_ID=$($AAPT dump badging artifacts/debug/app-debug.apk | awk -F"'" '/package: name=/{print $2}')
          if [ -z "$APP_ID" ]; then
            echo "APP_ID_RESOLVE_FAILED=1" >> $GITHUB_ENV
            exit 0
          fi

          # Clear logs & start fresh capture
          adb logcat -c || true
          adb logcat -v time > artifacts/smoke/logcat.txt 2>&1 &
          LOG_PID=$!

          # Launch app (simulate launcher tap)
          adb shell monkey -p "$APP_ID" -c android.intent.category.LAUNCHER 1

          # Wait up to 60s for first RN "Running" log
          start_ts=$SECONDS
          deadline=$((SECONDS+60))
          ttjs_s=""
          while [ $SECONDS -lt $deadline ]; do
            if grep -q "ReactNativeJS: Running" artifacts/smoke/logcat.txt; then
              ttjs_s=$((SECONDS-start_ts))
              break
            fi
            sleep 1
          done

          kill $LOG_PID || true

          echo "APP_ID=$APP_ID" >> $GITHUB_ENV
          echo "TTJS_S=${ttjs_s:-""}" >> $GITHUB_ENV
          echo "APP_ID_RESOLVE_FAILED=0" >> $GITHUB_ENV || true

      - name: Make summary.json
        shell: bash
        run: |
          set -e
          SHA_SHORT=$(git rev-parse --short HEAD)
          DEBUG_SIZE=$( [ -f artifacts/debug/app-debug.apk ] && stat -f%z artifacts/debug/app-debug.apk || echo "0" )
          RELEASE_SIZE=$( [ -f artifacts/release/app-release.apk ] && stat -f%z artifacts/release/app-release.apk || echo "0" )
          BOOT_OK=$([ "${BOOT_FAILED:-1}" = "0" ] && echo true || echo false)
          TTJS_VAL=${TTJS_S:-null}

          cat > artifacts/smoke/summary.json <<JSON
          {
            "commit": "$SHA_SHORT",
            "boot_ok": $BOOT_OK,
            "ttjs_s": ${TTJS_VAL:-null},
            "debug_apk_bytes": $DEBUG_SIZE,
            "release_apk_bytes": $RELEASE_SIZE,
            "app_id": "${APP_ID:-""}"
          }
          JSON

      - name: Upload Smoke Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: smoke-artifacts
          path: artifacts/smoke/

      - name: Step Summary
        shell: bash
        run: |
          echo "### Smoke Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Boot OK: $([ "${BOOT_FAILED:-1}" = "0" ] && echo "yes" || echo "no")" >> $GITHUB_STEP_SUMMARY
          echo "- TTJS (s): ${TTJS_S:-unknown}" >> $GITHUB_STEP_SUMMARY
          echo "- Debug APK bytes: $( [ -f artifacts/debug/app-debug.apk ] && stat -f%z artifacts/debug/app-debug.apk || echo "0")" >> $GITHUB_STEP_SUMMARY
          echo "- Release APK bytes: $( [ -f artifacts/release/app-release.apk ] && stat -f%z artifacts/release/app-release.apk || echo "0")" >> $GITHUB_STEP_SUMMARY

      - name: Teardown ADB/Emu
        if: always()
        shell: bash
        run: |
          adb emu kill || true
          adb kill-server || true