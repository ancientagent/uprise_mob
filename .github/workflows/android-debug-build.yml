name: Android Build & Smoke Test

env:
  NODE_OPTIONS: --openssl-legacy-provider
  ADB_INSTALL_TIMEOUT: 20
  SMOKE_SOFT_FAIL: ${{ github.event.inputs.smoke_soft_fail }}

on:
  workflow_dispatch:
    inputs:
      smoke_soft_fail:
        description: "Mark smoke test neutral on failure (upload logs anyway)"
        required: false
        default: "false"
  push:
    branches:
      - main
      - develop
      - feat/ccpm-framework
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    name: Build APKs
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17 (for Android SDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Prepare Android SDK (isolated, AGP 7.0.x safe)
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
        run: |
          set -e

          # Isolate SDK so AGP doesn't see newer "33x/34x/..." tool labels
          rm -rf "$ANDROID_SDK_ROOT"
          mkdir -p "$ANDROID_SDK_ROOT"

          echo "sdk.dir=$ANDROID_SDK_ROOT" > ./android/local.properties

          # Pin an older cmdline-tools revision compatible with AGP 7.0.x
          # (8512546 is known-good; avoid latest which emits newer repo XML/labels)
          CT_REV=8512546
          curl -sSL "https://dl.google.com/android/repository/commandlinetools-linux-${CT_REV}_latest.zip" -o cmdtools.zip
          unzip -q cmdtools.zip -d "$ANDROID_SDK_ROOT"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/bin" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true
          mv "$ANDROID_SDK_ROOT/cmdline-tools/lib" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true
          mv "$ANDROID_SDK_ROOT/cmdline-tools/source.properties" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true
          mv "$ANDROID_SDK_ROOT/cmdline-tools/NOTICE.txt" "$ANDROID_SDK_ROOT/cmdline-tools/latest/" || true

          # Accept licenses non-interactively
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" --licenses >/dev/null

          # Install ONLY what AGP 7.0.4 needs
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" \
            "platforms;android-31" \
            "build-tools;31.0.0"

          echo "=== Installed build-tools ==="
          ls -1 "$ANDROID_SDK_ROOT/build-tools" || true

          # Guard: fail if anything other than 31.0.0 is present
          BT_COUNT=$(ls -1 "$ANDROID_SDK_ROOT/build-tools" | wc -l | tr -d ' ')
          if [ "$BT_COUNT" != "1" ] || [ ! -d "$ANDROID_SDK_ROOT/build-tools/31.0.0" ]; then
            echo "Unexpected build-tools present. Found:"
            ls -1 "$ANDROID_SDK_ROOT/build-tools" || true
            exit 1
          fi

      - name: Print versions
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
        run: |
          echo "JAVA:" && java -version
          echo "Gradle wrapper:" && ./android/gradlew -v
          echo "SDK Root: $ANDROID_SDK_ROOT"
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" --list | head -n 20 || true

      - name: Switch to JDK 11 (for Gradle)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Use Node 18 (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Prime Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Ensure Gradle build cache on
        run: |
          mkdir -p ~/.gradle
          {
            echo "org.gradle.caching=true"
            echo "org.gradle.parallel=false"
          } >> ~/.gradle/gradle.properties
          
      - name: Install Node dependencies
        run: npm install --legacy-peer-deps

      - name: Install TrackPlayer stub (TEMP for CI)
        run: |
          # Create TrackPlayer stub for CI builds
          mkdir -p node_modules/react-native-track-player
          cat > node_modules/react-native-track-player/package.json << 'EOF'
          {
            "name": "react-native-track-player",
            "version": "0.0.0-stub",
            "description": "Temporary stub for react-native-track-player (CI build only)",
            "main": "index.js",
            "private": true
          }
          EOF
          cat > node_modules/react-native-track-player/index.js << 'EOF'
          // TEMP STUB: react-native-track-player disabled for CI build
          const TrackPlayer = {
            setupPlayer: async () => console.log('TrackPlayer stub: setupPlayer called'),
            stop: async () => console.log('TrackPlayer stub: stop called'),
            getTrack: async () => null,
            getState: async () => 'idle',
            getPosition: async () => 0,
            play: async () => {},
            pause: async () => {},
            reset: async () => {},
            add: async () => {},
            skip: async () => {},
            skipToNext: async () => {},
            skipToPrevious: async () => {},
            remove: async () => {},
            destroy: async () => {},
            updateOptions: async () => {},
            updateMetadataForTrack: async () => {},
            getQueue: async () => [],
            getCurrentTrack: async () => null,
            getDuration: async () => 0,
            getBufferedPosition: async () => 0,
            getVolume: async () => 1,
            setVolume: async () => {},
            getRate: async () => 1,
            setRate: async () => {},
            seekTo: async () => {},
            setRepeatMode: async () => {},
            getRepeatMode: async () => 0,
          };
          export default TrackPlayer;
          EOF
          echo "TrackPlayer stub installed for CI build"

      - name: Make Gradle wrapper executable
        run: chmod +x ./android/gradlew

      - name: Build Debug & Release (stable flags)
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
          NODE_OPTIONS: --openssl-legacy-provider
          GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.jvmargs='-Xmx3g -XX:+HeapDumpOnOutOfMemoryError' -Dorg.gradle.workers.max=2"
        run: |
          set -e
          cd android
          ./gradlew :app:assembleDebug  --build-cache --no-parallel --stacktrace
          ./gradlew :app:assembleRelease --build-cache --no-parallel --stacktrace

      - name: Print artifact sizes
        run: |
          ls -lh android/app/build/outputs/apk/debug/*.apk  || true
          ls -lh android/app/build/outputs/apk/release/*.apk || true

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: android/app/build/outputs/apk/debug/*.apk
          retention-days: 7

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: android/app/build/outputs/apk/release/*.apk
          retention-days: 7

  smoke-test:
    name: Android Smoke Test (API 30)  
    needs: build
    runs-on: ubuntu-22.04
    timeout-minutes: 35
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Debug APK
        uses: actions/download-artifact@v4
        with:
          name: app-debug-apk
          path: ./ci-apk

      - name: Setup JDK 17 (for Android SDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Android AVD
        uses: actions/cache@v4
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
            ~/.android/cache/*
          key: avd-${{ runner.os }}-api30-x86_64-v1

      - name: Install PulseAudio libraries for emulator
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y libpulse0 pulseaudio

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: "platforms;android-30 system-images;android-30;default;x86_64 platform-tools emulator build-tools;31.0.0"

      - name: Find APK and set env
        run: |
          APK=$(find ./ci-apk -name "*.apk" -type f | head -1)
          if [ -z "$APK" ]; then
            echo "No APK found under ./ci-apk"
            exit 1
          fi
          echo "APK=$APK" | tee -a "$GITHUB_ENV"

      - name: Start Emulator (API 30 simple)
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          arch: x86_64
          profile: pixel_5
          disable-animations: true
          force-avd-creation: true
          emulator-options: >
            -no-snapshot
            -noaudio
            -no-window
            -gpu swiftshader_indirect
            -accel off
            -camera-back none
            -qemu -m 2048
          script: |
            adb wait-for-device
            timeout 600s bash -c 'until adb shell getprop sys.boot_completed | grep -m1 "1"; do sleep 5; done'
            adb shell input keyevent 82
            echo "Emulator booted successfully"

      - name: Ensure build-tools present (for aapt)
        shell: bash
        run: |
          if ! command -v aapt >/dev/null 2>&1; then
            echo "aapt not found; installing build-tools 30.0.3"
            yes | ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager "build-tools;30.0.3" > /dev/null
            echo "PATH update"
            echo "${ANDROID_SDK_ROOT}/build-tools/30.0.3" >> $GITHUB_PATH
          fi

      - name: Install Debug APK
        shell: bash
        run: |
          echo "Installing APK..."
          adb install -r "$APK"

      - name: Determine package + launchable activity (robust)
        id: pkg
        shell: bash
        run: |
          set -euo pipefail
          APK="$(ls artifacts/debug/*.apk | head -n1)"
          echo "apk=$APK" >> $GITHUB_OUTPUT

          # Generate APK metadata for logs
          mkdir -p artifacts/logs
          if command -v aapt >/dev/null 2>&1; then
            aapt dump badging "$APK" | tee artifacts/logs/apk_badging.txt
          fi

          # Prefer aapt, fallback to apkanalyzer
          if command -v aapt >/dev/null 2>&1; then
            PKG=$(aapt dump badging "$APK" | sed -n "s/.*package name='\([^']*\)'.*/\1/p" | head -n1)
          else
            if command -v apkanalyzer >/dev/null 2>&1; then
              PKG=$(apkanalyzer manifest application-id "$APK")
            else
              echo "Neither aapt nor apkanalyzer found"; exit 1
            fi
          fi
          echo "pkg=$PKG" >> $GITHUB_OUTPUT
          echo "Detected package: $PKG"

          # Resolve real launchable activity from the package
          # (uses the default LAUNCHER activity exposed by the app)
          ACT=$(adb shell cmd package resolve-activity -c android.intent.category.LAUNCHER "$PKG" \
                | sed -n "s/.*name=//p" | tr -d '\r' | head -n1)
          if [ -z "$ACT" ]; then
            # Fallback: common RN default
            ACT="$PKG/.MainActivity"
            echo "Fallback to $ACT"
          fi
          echo "act=$ACT" >> $GITHUB_OUTPUT
          echo "Launchable activity: $ACT"

      - name: Launch App (using resolved activity)
        shell: bash
        run: |
          adb shell am start -n "${{ steps.pkg.outputs.act }}" || true
          sleep 10
          adb shell pidof "${{ steps.pkg.outputs.pkg }}" || (echo "App not running" && exit 1)

      - name: Assert React Native JS initialized
        shell: bash
        run: |
          # Wait up to 90s for the first JS log
          timeout 90s bash -c 'until adb logcat -d | grep -m1 "ReactNativeJS"; do sleep 5; done'
          echo "✅ ReactNativeJS detected in logcat"

      - name: Assert main activity has focus
        shell: bash
        run: |
          PKG="${{ steps.pkg.outputs.pkg }}"
          CURRENT=$(adb shell dumpsys window | sed -n "s/.*mCurrentFocus=Window{[^ ]* [^ ]* \\([^}]*\\)}.*/\\1/p")
          echo "mCurrentFocus=$CURRENT"
          echo "$CURRENT" | grep -q "$PKG" || (echo "❌ Main activity not focused" && exit 1)

      - name: Collect deep diagnostics
        if: always()
        shell: bash
        run: |
          mkdir -p artifacts/logs
          # Full logcat since boot
          adb logcat -d > artifacts/logs/logcat_full.txt || true
          # Trim RN-only lines for quick read
          grep -i "ReactNative" artifacts/logs/logcat_full.txt > artifacts/logs/logcat_reactnative.txt || true
          # System state
          adb shell getprop > artifacts/logs/device_getprop.txt || true
          adb shell settings list global > artifacts/logs/settings_global.txt || true
          adb shell settings list system > artifacts/logs/settings_system.txt || true
          adb shell dumpsys activity > artifacts/logs/dumpsys_activity.txt || true
          adb shell dumpsys window > artifacts/logs/dumpsys_window.txt || true
          adb shell dumpsys package "${{ steps.pkg.outputs.pkg }}" > artifacts/logs/dumpsys_package.txt || true
          # App process tracking  
          adb shell pidof "${{ steps.pkg.outputs.pkg }}" > artifacts/logs/app_pid.txt || true
          # One heavy artifact for deep dive (10–30MB typical)
          adb bugreport artifacts/logs/bugreport.zip || true

      - name: Collect ANR & tombstones (if any)
        if: always()
        shell: bash
        run: |
          mkdir -p artifacts/logs
          adb shell ls -l /data/anr/ > artifacts/logs/anr_dir.txt 2>/dev/null || true
          # Pull ANRs if readable (emulators often allow)
          for f in $(adb shell ls /data/anr/ 2>/dev/null | tr -d '\r'); do
            adb shell cat "/data/anr/$f" > "artifacts/logs/anr_$f" 2>/dev/null || true
          done
          # Tombstones
          adb shell ls -l /data/tombstones/ > artifacts/logs/tombstones_dir.txt 2>/dev/null || true
          for f in $(adb shell ls /data/tombstones/ 2>/dev/null | tr -d '\r'); do
            adb shell cat "/data/tombstones/$f" > "artifacts/logs/$f" 2>/dev/null || true
          done

      - name: Upload smoke logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-logs
          path: artifacts/logs/**

      - name: Summarize smoke results
        if: always()
        shell: bash
        run: |
          mkdir -p artifacts/logs
          LOG=artifacts/logs/logcat_full.txt
          RN=artifacts/logs/logcat_reactnative.txt
          SUM="$GITHUB_STEP_SUMMARY"

          echo "## Smoke Summary" >> "$SUM"
          echo "" >> "$SUM"

          # RN JS presence
          if grep -q "ReactNativeJS" "$RN" 2>/dev/null; then
            echo "✅ **ReactNativeJS detected** (JS runtime initialized)" >> "$SUM"
          else
            echo "❌ **No ReactNativeJS logs detected** (JS may not have started)" >> "$SUM"
          fi

          # Main failures to highlight
          echo "" >> "$SUM"
          echo "### Notable log signals" >> "$SUM"
          grep -E "FATAL EXCEPTION|Process .* has died|ANR|E ReactNative|E AndroidRuntime" "$LOG" \
            | tail -n 40 \
            | sed 's/^/- /' >> "$SUM" || true

          # APK + pkg info
          if [ -f artifacts/logs/apk_badging.txt ]; then
            VER=$(sed -n "s/.*versionName='\([^']*\)'.*/\1/p" artifacts/logs/apk_badging.txt | head -n1)
            echo "" >> "$SUM"
            echo "**APK versionName**: \`$VER\`" >> "$SUM"
          fi
          
          echo "" >> "$SUM"
          echo "**Resolved Package:** \`${{ steps.pkg.outputs.pkg }}\`" >> "$SUM"
          echo "**Launch Activity:** \`${{ steps.pkg.outputs.act }}\`" >> "$SUM"

          echo "" >> "$SUM"
          echo "_Full logs available in the **smoke-logs** artifact (includes bugreport)._ " >> "$SUM"

      - name: Guardrail - assert emulator config
        if: always()
        shell: bash
        run: |
          WF=".github/workflows/android-debug-build.yml"
          echo "Checking $WF for fixed emulator config…"
          grep -q "api-level: 30" "$WF" || (echo "❌ api-level not 30"; exit 1)
          grep -q "arch: x86_64" "$WF" || (echo "❌ arch not x86_64"; exit 1)
          grep -q "profile: pixel_5" "$WF" || (echo "❌ profile not pixel_5"; exit 1)
          grep -q "\-no-snapshot" "$WF" || (echo "❌ -no-snapshot missing"; exit 1)
          grep -q "\-noaudio" "$WF" || (echo "❌ -noaudio missing"; exit 1)
          grep -q "\-no-window" "$WF" || (echo "❌ -no-window missing"; exit 1)
          grep -q "swiftshader_indirect" "$WF" || (echo "❌ gpu swiftshader_indirect missing"; exit 1)
          grep -q "\-accel off" "$WF" || (echo "❌ -accel off missing"; exit 1)
          echo "✅ Emulator config guardrail passed."

