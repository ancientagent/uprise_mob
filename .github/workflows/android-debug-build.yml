name: Android CI

on:
  push:
    branches: [ main, develop, feat/**, fix/** ]
  pull_request:

jobs:
  build:
    name: Build Debug & Release APKs
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'

      - name: Setup JDK 17 for SDK tools
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Ensure build-tools and platform-tools in PATH (build job)
        shell: bash
        run: |
          sdkmanager --install "build-tools;31.0.0" "platform-tools" >/dev/null
          echo "${ANDROID_SDK_ROOT}/build-tools/31.0.0" >> $GITHUB_PATH
          echo "${ANDROID_SDK_ROOT}/platform-tools" >> $GITHUB_PATH

      - name: Switch to JDK 11 for Gradle build
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Cache Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Install deps
        run: |
          corepack enable
          yarn install --frozen-lockfile || yarn install --network-timeout 600000

      - name: Build APKs
        run: |
          cd android
          chmod +x ./gradlew
          ./gradlew :app:assembleDebug :app:assembleRelease --no-daemon --stacktrace

      # Optional: zipalign+apksigner if your pipeline requires CI signing for release
      # (Assumes build-tools 31.0.0 available)
      - name: Prepare artifacts
        run: |
          mkdir -p artifacts/debug artifacts/release
          cp android/app/build/outputs/apk/debug/app-debug.apk artifacts/debug/ || true
          cp android/app/build/outputs/apk/release/app-release.apk artifacts/release/ || true

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: artifacts/debug/app-debug.apk
          if-no-files-found: warn

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: artifacts/release/app-release.apk
          if-no-files-found: warn

  smoke-test:
    name: Android Smoke Test (macOS HVF, API 30)
    runs-on: macos-13
    needs: build
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK 17 for SDK tools
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Ensure build-tools and platform-tools in PATH (smoke job)
        shell: bash
        run: |
          sdkmanager --install "build-tools;31.0.0" "platform-tools" >/dev/null
          echo "${ANDROID_SDK_ROOT}/build-tools/31.0.0" >> $GITHUB_PATH
          echo "${ANDROID_SDK_ROOT}/platform-tools" >> $GITHUB_PATH

      - name: Download Debug APK
        uses: actions/download-artifact@v4
        with:
          name: app-debug-apk
          path: artifacts/debug

      - name: Download Release APK
        uses: actions/download-artifact@v4
        with:
          name: app-release-apk
          path: artifacts/release

      - name: Create AVD (API 30, default, x86_64)
        shell: bash
        run: |
          yes "y" | sdkmanager --install "system-images;android-30;default;x86_64"
          echo "no" | avdmanager create avd -n ci_api_30 -k "system-images;android-30;default;x86_64" --device "pixel_5"

      - name: Boot Emulator (HVF) + ADB hygiene
        shell: bash
        run: |
          mkdir -p artifacts/smoke
          adb kill-server || true
          
          # Start emulator with proven API 30 config
          $ANDROID_SDK_ROOT/emulator/emulator -avd ci_api_30 \
            -no-snapshot -no-snapshot-save -no-window -no-audio -no-boot-anim \
            -gpu swiftshader_indirect -camera-back none -qemu -m 1024 \
            -netfast -no-metrics -verbose > artifacts/smoke/emulator.txt 2>&1 &
          EMU_PID=$!
          
          # Portable boot wait using date (6 minute cap)
          echo "Starting boot wait at $(date)"
          boot_start=$(date +%s)
          boot_timeout=360  # 6 minutes
          adb start-server
          
          # ADB hygiene with 5x recovery attempts
          for recovery_attempt in {1..5}; do
            adb wait-for-device || true
            sleep 2
            
            while true; do
              current_time=$(date +%s)
              elapsed=$((current_time - boot_start))
              
              if [ $elapsed -gt $boot_timeout ]; then
                echo "Boot timeout after ${elapsed}s"
                break 2
              fi
              
              booted=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
              if [ "$booted" = "1" ]; then
                echo "Boot completed in ${elapsed}s"
                break 2
              fi
              
              sleep 3
            done
            
            if [ $recovery_attempt -lt 5 ]; then
              echo "Recovery attempt $recovery_attempt: restarting ADB"
              adb kill-server
              sleep 2
              adb start-server
            fi
          done

          # Basic sanity
          adb shell settings put global window_animation_scale 0 || true
          adb shell settings put global transition_animation_scale 0 || true
          adb shell settings put global animator_duration_scale 0 || true

          # Record boot wait seconds
          if [ "$booted" != "1" ]; then
            echo "BOOT_FAILED=1" >> $GITHUB_ENV
          else
            echo "BOOT_FAILED=0" >> $GITHUB_ENV
          fi

      - name: Install APKs
        if: env.BOOT_FAILED == '0'
        shell: bash
        run: |
          set -e
          DEBUG_APK="artifacts/debug/app-debug.apk"
          RELEASE_APK="artifacts/release/app-release.apk"

          adb install -r "$DEBUG_APK"
          # Verify release is installable (no launch)
          if [ -f "$RELEASE_APK" ]; then
            adb install -r "$RELEASE_APK" || true
          fi

      - name: Launch Debug & Capture TTJS
        if: env.BOOT_FAILED == '0'
        shell: bash
        run: |
          set -e
          # Derive applicationId from debug apk using aapt
          # Ensure build-tools are present
          sdkmanager --install "build-tools;31.0.0" >/dev/null
          AAPT="$ANDROID_SDK_ROOT/build-tools/31.0.0/aapt"
          APP_ID=$($AAPT dump badging artifacts/debug/app-debug.apk | awk -F"'" '/package: name=/{print $2}')
          if [ -z "$APP_ID" ]; then
            echo "APP_ID_RESOLVE_FAILED=1" >> $GITHUB_ENV
            exit 0
          fi

          # Clear logs & start fresh capture
          adb logcat -c || true
          adb logcat -v time > artifacts/smoke/logcat.txt 2>&1 &
          LOG_PID=$!

          # Launch app (simulate launcher tap)
          adb shell monkey -p "$APP_ID" -c android.intent.category.LAUNCHER 1

          # Wait up to 90s for first RN "Running" log (portable timing)
          launch_start=$(date +%s)
          ttjs_timeout=90
          ttjs_s=""
          
          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - launch_start))
            
            if [ $elapsed -gt $ttjs_timeout ]; then
              echo "TTJS timeout after ${elapsed}s"
              break
            fi
            
            if grep -q "ReactNativeJS: Running" artifacts/smoke/logcat.txt; then
              ttjs_s=$elapsed
              echo "TTJS detected in ${ttjs_s}s"
              break
            fi
            
            sleep 1
          done

          kill $LOG_PID || true

          echo "APP_ID=$APP_ID" >> $GITHUB_ENV
          echo "TTJS_S=${ttjs_s:-""}" >> $GITHUB_ENV
          echo "APP_ID_RESOLVE_FAILED=0" >> $GITHUB_ENV || true

      - name: Make summary.json + run IDs
        shell: bash
        run: |
          set -e
          mkdir -p artifacts/smoke artifacts/ids
          SHA_SHORT=$(git rev-parse --short HEAD)
          DEBUG_SIZE=$( [ -f artifacts/debug/app-debug.apk ] && stat -f%z artifacts/debug/app-debug.apk || echo "0" )
          RELEASE_SIZE=$( [ -f artifacts/release/app-release.apk ] && stat -f%z artifacts/release/app-release.apk || echo "0" )
          BOOT_OK=$([ "${BOOT_FAILED:-1}" = "0" ] && echo true || echo false)
          TTJS_VAL=${TTJS_S:-null}
          
          # Extract SDK versions
          MIN_SDK="unknown"
          TARGET_SDK="unknown"
          if [ -f artifacts/debug/app-debug.apk ]; then
            MIN_SDK=$($ANDROID_SDK_ROOT/build-tools/31.0.0/aapt dump badging artifacts/debug/app-debug.apk | grep -o "sdkVersion:'[0-9]*'" | cut -d"'" -f2 || echo "unknown")
            TARGET_SDK=$($ANDROID_SDK_ROOT/build-tools/31.0.0/aapt dump badging artifacts/debug/app-debug.apk | grep -o "targetSdkVersion:'[0-9]*'" | cut -d"'" -f2 || echo "unknown")
          fi

          cat > artifacts/smoke/summary.json <<JSON
          {
            "commit": "$SHA_SHORT",
            "boot_ok": $BOOT_OK,
            "ttjs_s": ${TTJS_VAL:-null},
            "debug_apk_bytes": $DEBUG_SIZE,
            "release_apk_bytes": $RELEASE_SIZE,
            "app_id": "${APP_ID:-""}",
            "min_sdk_version": "$MIN_SDK",
            "target_sdk_version": "$TARGET_SDK"
          }
          JSON
          
          # Generate run IDs for tracking
          echo "$GITHUB_RUN_ID" > artifacts/ids/RUN_ID.txt
          echo "$GITHUB_JOB" > artifacts/ids/JOB_ID.txt

      - name: Upload Smoke Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: smoke-artifacts
          path: artifacts/smoke/
          
      - name: Upload Run IDs
        uses: actions/upload-artifact@v4
        with:
          name: ids
          path: artifacts/ids/

      - name: Step Summary
        shell: bash
        run: |
          echo "### Smoke Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Boot OK: $([ "${BOOT_FAILED:-1}" = "0" ] && echo "✅ yes" || echo "❌ no")" >> $GITHUB_STEP_SUMMARY
          echo "- TTJS (launch → first ReactNativeJS): **${TTJS_S:-unknown}s**" >> $GITHUB_STEP_SUMMARY
          
          # Extract min/target SDK versions from debug APK
          if [ -f artifacts/debug/app-debug.apk ]; then
            DEBUG_SIZE=$(stat -f%z artifacts/debug/app-debug.apk)
            MIN_SDK=$($ANDROID_SDK_ROOT/build-tools/31.0.0/aapt dump badging artifacts/debug/app-debug.apk | grep -o "sdkVersion:'[0-9]*'" | cut -d"'" -f2 || echo "unknown")
            TARGET_SDK=$($ANDROID_SDK_ROOT/build-tools/31.0.0/aapt dump badging artifacts/debug/app-debug.apk | grep -o "targetSdkVersion:'[0-9]*'" | cut -d"'" -f2 || echo "unknown")
            echo "- Debug APK: ${DEBUG_SIZE} bytes (minSdk: ${MIN_SDK}, targetSdk: ${TARGET_SDK})" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Debug APK: 0 bytes" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f artifacts/release/app-release.apk ]; then
            RELEASE_SIZE=$(stat -f%z artifacts/release/app-release.apk)
            echo "- Release APK: ${RELEASE_SIZE} bytes" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Release APK: 0 bytes" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Teardown ADB/Emu
        if: always()
        shell: bash
        run: |
          adb emu kill || true
          adb kill-server || true