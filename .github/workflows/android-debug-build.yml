name: Android Debug Build

on:
  push:
    branches: [ main, feat/**, fix/**, chore/** ]
  pull_request:

jobs:
  android-build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Download cmdline-tools
      - name: Install Android cmdline-tools
        run: |
          set -euxo pipefail
          export ANDROID_SDK_ROOT="$HOME/android-sdk"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          mkdir -p "$ANDROID_SDK_ROOT"/cmdline-tools
          curl -sSL -o /tmp/cmdtools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip -q /tmp/cmdtools.zip -d /tmp/cmdtools
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          mv /tmp/cmdtools/cmdline-tools/* "$ANDROID_SDK_ROOT/cmdline-tools/latest/"

      # JDK 17 ONLY for sdkmanager
      - name: Set up JDK 17 (Temurin) for SDK install
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install Android SDK components (api 31, build-tools 31.0.0)
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          set -euxo pipefail
          # avoid sdkmanager warnings
          mkdir -p "$HOME/.android" && touch "$HOME/.android/repositories.cfg"
          # create licenses directory and accept all common licenses
          mkdir -p "$ANDROID_SDK_ROOT/licenses"
          echo -e "8933bad161af4178b1185d1a37fbf41ea5269c55\nd56f5187479451eabf01fb78af6dfcb131a6481e\n24333f8a63b6825ea9c5514f83c2829b004d1fee" > "$ANDROID_SDK_ROOT/licenses/android-sdk-license"
          echo "601085b94cd77f0b54ff86406957099ebe79c4d6" > "$ANDROID_SDK_ROOT/licenses/android-googletv-license"
          echo "33b6a2b64607f11b759f320ef9dff4ae5c47d97a" > "$ANDROID_SDK_ROOT/licenses/google-gdk-license"
          echo "d975f751698a77b662f1254ddbeed3901e976f5a" > "$ANDROID_SDK_ROOT/licenses/intel-android-extra-license"
          # install packages directly
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" --install \
            "platform-tools" \
            "platforms;android-31" \
            "build-tools;31.0.0"
          "$ANDROID_SDK_ROOT/platform-tools/adb" version || true

      # Switch back to Java 11 for Gradle/AGP 7.0.x
      - name: Set up JDK 11 (Temurin) for Gradle
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '11'

      - name: Normalize gradlew (LF + +x) for Linux CI
        run: |
          git config --global core.autocrlf false
          sed -i 's/\r$//' android/gradlew
          chmod +x android/gradlew

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install JS deps
        run: npm install --legacy-peer-deps

      - name: Dump RN autolink config
        run: |
         npx --yes react-native config | tee rn-config.json
         command -v jq >/dev/null 2>&1 && jq '.dependencies | keys' rn-config.json || cat rn-config.json

      - name: Upload RN config
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rn-config
          path: rn-config.json
          if-no-files-found: warn

      - name: Ensure Android debug keystore
        run: |
          mkdir -p ~/.android
          if [ ! -f ~/.android/debug.keystore ]; then
            keytool -genkey -v \
              -keystore ~/.android/debug.keystore \
              -storepass android -keypass android \
              -alias androiddebugkey \
              -keyalg RSA -keysize 2048 -validity 10000 \
              -dname "CN=Android Debug,O=Android,C=US"
          fi

      - name: Lint (Android)
        working-directory: android
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
        run: ./gradlew --no-daemon lintDebug || true

      - name: Unit tests (JS)
        run: |
          npm test --silent || true

      - name: Build Android Debug APK
        working-directory: android
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
        run: ./gradlew --no-daemon clean assembleDebug --stacktrace --info

      - name: Upload APK
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: android/app/build/outputs/apk/debug/*.apk
          if-no-files-found: warn

      - name: Upload Gradle reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-reports
          path: |
            android/**/build/reports/**
            android/**/build/outputs/**
          if-no-files-found: warn

  android-smoke-test:
    name: Android Smoke Test (API 31)
    runs-on: ubuntu-latest
    needs: android-build   # wait for the build job to finish
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Verify Java version
        run: |
          java -version
          echo "JAVA_HOME=$JAVA_HOME"

      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: app-debug-apk
          path: ./ci-apk

      - name: Boot emulator, install & launch app
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 31
          arch: x86_64
          profile: pixel_5
          target: default
          force-avd-creation: true
          disable-animations: true
          script: |
            set -eux && \
            echo "== List downloaded APKs ==" && ls -R ./ci-apk || true && \
            echo "== Select and use APK ==" && APK="$(find ./ci-apk -type f -name '*.apk' | head -n1)" && test -n "$APK" || { echo "ERROR: No APK found in ./ci-apk" | tee ./smoke-error.txt; exit 1; } && \
            echo "Using APK: $APK" && \
            echo "== ADB & device status ==" && adb version || true && \
            adb devices && adb wait-for-device && \
            echo "== Ensure clean install ==" && adb shell pm list packages | grep com.app.uprise || true && \
            adb shell pm uninstall com.app.uprise || true && \
            echo "== Install APK ==" && adb install -r -d -t "$APK" && \
            echo "== Verify package installed ==" && adb shell pm list packages | grep com.app.uprise > ./smoke-pm.txt || true && \
            cat ./smoke-pm.txt || true && \
            echo "== Launch main activity explicitly ==" && adb shell am start -W -n com.app.uprise/.MainActivity || true && \
            echo "== Let app settle and capture logs ==" && sleep 30 && adb logcat -v time -d > ./smoke-logcat.txt || true && \
            echo "== Dump activity stacks (dumpsys) ==" && adb shell dumpsys activity activities > ./smoke-dumpsys.txt || true && \
            echo "== Done ==" && exit 0

      - name: Upload smoke test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-smoke-artifacts
          path: |
            ./smoke-logcat.txt
            ./smoke-dumpsys.txt
            ./smoke-pm.txt
            ./smoke-error.txt
          if-no-files-found: warn

